% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midas_functions.R
\name{train}
\alias{train}
\title{Train an imputation model using Midas}
\usage{
train(
  data,
  binary_columns = NULL,
  softmax_columns = NULL,
  training_epochs = 10L,
  layer_structure = c(256, 256, 256),
  learn_rate = 4e-04,
  input_drop = 0.8,
  seed = 123L,
  vae_layer = FALSE,
  latent_space_size = 4,
  cont_adj = 1,
  binary_adj = 1,
  softmax_adj = 1,
  dropout_level = 0.5,
  vae_alpha = 1,
  vae_sample_var = 1
)
}
\arguments{
\item{data}{a data.frame (or coercible) object, or an object of class \code{midas_pre} created from rMIDAS::convert()}

\item{binary_columns}{a vector of columns containing binary variables. NOTE: if \code{data} is a \code{midas_pre} object, this argument will be overwritten.}

\item{softmax_columns}{a list of lists, each internal list corresponding to a single categorical variable and containing names of the one-hot encoded variable names. NOTE: if \code{data} is a \code{midas_pre} object, this argument will be overwritten.}

\item{training_epochs}{an integer indicating the number of forward passes to conduct when running the model.}

\item{...}{Further arguments that can be passed to instantiate a Midas model. Please see technical documentation for more information.}
}
\value{
Returns object of class \code{midas} from which completed datasets can be drawn, using \code{rMIDAS::complete()}
}
\description{
train() builds and runs a MIDAS neural network on the supplied data.
}
\examples{
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
                      b = 1:1000,
                      c = sample(c("YES","NO",NA),1000,replace=TRUE),
                      d = runif(1000,1,10),
                      e = sample(c("YES","NO"), 1000, replace = TRUE),
                      f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))

# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")

# Pre-process data
test_data <- convert(raw_data,
                     bin_cols = test_bin,
                     cat_cols = test_cat,
                     minmax_scale = TRUE)

# Train imputation model
test_model <- train(test_data)

# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
}
\keyword{import}
