# Undo scaling
if (unscale) {
num_params <- mid_obj$preproc$minmax_params
num_cols <- names(num_params)
for (j in num_cols) {
set(df, j = j, value = undo_minmax(df[[j]], s_min = num_params[[j]]$min, s_max = num_params[[j]]$max))
}
}
# Add binary labels
if (bin_label) {
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
}
if (cat_coalesce) {
cat_params <- mid_obj$preproc$cat_lists
cat_cols <- mid_obj$preproc$cat_names
for (i in 1:length(cat_cols)) {
set(df,
j = cat_cols[[i]],
value = coalesce_one_hot(X = df[,cat_params[[i]], with = FALSE],
var_name = cat_cols[i]))
}
# Remove one-hot columns
df[,do.call("c",cat_params)] <- NULL
}
return(df)
})
draws_post
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
View(complete_datasets)
View(complete_datasets[[1]])
class(test_imp)
!("preproc" %in% names(test_imp))
document()
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
View(complete_datasets)
test <- data.frame(x = rnorm(1000),
y = rnorm(1000)*2)
lm(y ~ x, test)
glm(y ~ x, test)
glm(y ~ x, family = gaussian)
glm(y ~ x, test, family = gaussian)
a <- gaussian
args <- list()
is.null(args['family'])
args[family]
args['family']
is.null(args[['family']])
if (is.null(args[['family']])) {
cat("Assuming gaussian model.")
family <- gaussian
}
...
df_list <- list(test)
df_list
combine(df_list, "y ~ x")
document()
document()
document()
document()
document()
combine(df_list, "y ~ x")
if (is.null(args[['family']])) {
cat("No model family specified -- assuming gaussian model.")
family <- gaussian
}
df_list
models <- lapply(df_list,
function (x) {
glm(mod_formula, data = x, family = family, ...)
})
glm(mod_formula, data = x, family = family)
models <- lapply(df_list,
function (x) {
glm(mod_formula, data = x, family = family)
})
mod_formula = "y ~ x"
models <- lapply(df_list,
function (x) {
glm(mod_formula, data = x, family = family)
})
models
summary(models)
summary(models[[1]])
x = df_list[[1]]
x_mod <- glm(mod_formula, data = x, family = family, ...)
x_mod <- glm(mod_formula, data = x, family = family
)
summary(x_mod)
summary(x_mod)$coefficients
x_summary <- summary(x_mod)$coefficients
x_summary
dim(x_summary)
Q_bar <- matrix(nrow = dim(models[[1]])[1],
ncol = dim(models[[1]][2]))
Q_bar <- matrix(nrow = dim(models[[1]])[1],
ncol = dim(models[[1]])[2]))
Q_bar <- matrix(nrow = dim(models[[1]])[1],
ncol = dim(models[[1]])[2])
dim(models[[1]])[1]
models <- lapply(df_list,
function (x) {
x_mod <- glm(mod_formula, data = x, family = family, ...)
x_summary <- summary(x_mod)$coefficients
return(x_summary)
})
models <- lapply(df_list,
function (x) {
x_mod <- glm(mod_formula, data = x, family = family)
x_summary <- summary(x_mod)$coefficients
return(x_summary)
})
Q_bar <- matrix(nrow = dim(models[[1]])[1],
ncol = dim(models[[1]])[2])
Q_bar
x_summary
Q_bar <- (1/length(models))
sum(models)
models
do.call("sum", models)
Reduce("+", models)
models[[2]] <- models[[1]]
Reduce("+", models)
Q_bar <- (1/length(models))*Reduce("+", models)
Q_bar
Q_bar <- (1/length(models))*Reduce("+", models)$Estimate
Q_bar <- {(1/length(models))*Reduce("+", models)}$Estimate
Q_bar <- ((1/length(models))*Reduce("+", models))$Estimate
Q_bar <- (1/length(models))*Reduce("+", models)
Q_bar
Q_bar <- (1/length(models))*Reduce("+", models)['Estimate']
Q_bar
Q_bar <- (1/length(models))*Reduce("+", models)[['Estimate']]
Q_bar <- (1/length(models))*Reduce("+", models)
Q_bar[,1]
Q_bar <- (1/length(models))*Reduce("+", models)[,1]
U_bar <- avg_mod[,2]
m <- length(models)
m
avg_mod <- (1/m)*Reduce("+", models)
m-1
mod_demean <- lapply(models, function(x) x[,1]-Q_bar)
mod_demean
x
x = models[[1]]
x
x[,1]
Q_bar
x[,1]-Q_bar
mod_demean <- lapply(models, function(x) x[,1]-Q_bar)
mod_demean
mod_demean <- lapply(models, function(x) (x[,1]-Q_bar)^2)
models_demean <- lapply(models, function(x) (x[,1]-Q_bar)^2)
B <- (1/(m-1)) * Reduce("+", models_demean)
B
U_bar
U_bar <- avg_mod[,2]
U_bar
Var_Q_bar <- U_bar + (1 + (1/m))*B
Var_Q_bar
x
models[[1]]
vcov(models[[1]])
x_mod
vcov(x_mod)
summary(x_mod)
0.06374^2
mods_summary <- lapply(models, function (x) summary(x)$coefficients)
mods_summary <- lapply(models, function (x) summary(x)$coefficients)
models <- lapply(df_list,
function (x) {
glm(mod_formula, data = x, family = family, ...)
})
models <- lapply(df_list,
function (x) {
glm(mod_formula, data = x, family = family)
})
mods_summary <- lapply(models, function (x) summary(x)$coefficients)
mods_summary
mods_summary <- sapply(cbind, models,
function (x) summary(x)$coefficients[,1])
mods_summary <- sapply(models,
function (x) summary(x)$coefficients[,1],
simplify = "cbind")
mods_summary
df_list
df_list[[2]] <- df_list[[1]]
models <- lapply(df_list,
function (x) {
glm(mod_formula, data = x, family = family)
})
mods_summary <- sapply(models,
function (x) summary(x)$coefficients[,1],
simplify = "cbind")
mods_summary
test <- matrix(1:4)
test
test <- matrix(1:4, ncol = 2)
test
diag(test)
mods_var <- sapply(models,
function (x) diag(vcov(x)))
mods_var
summary(models[[1]])
vcov(models[[1]])
coef(models[[1]])
mods_var <- sapply(models,
function (x) diag(vcov(x)),
simplify = "cbind")
mods_var
sqrt(4.062576e-03)
mods_var
rowSums(mods_est)
mods_est <- sapply(models,
function (x) summary(x)$coefficients[,1],
simplify = "cbind")
mods_var <- sapply(models,
function (x) diag(vcov(x)),
simplify = "cbind")
combined_mod <- matrix(nrow = dim(models[[1]])[1],
ncol = dim(models[[1]])[2])
m <- length(models)
avg_mod <- (1/m)*rowSums(mods_est)
rowSums(mods_est)
avg_mod
avg_mod
U_bar <- (1/m)*rowSums(mods_var)
test
test - 1
test - c(1,0)
c(1,3,5) - c(1,3,5)
c(1,3,5) - c(2,4,6)
c(1,3,5) - c(2,0,6)
mods_est
Q_bar
models_demean <- apply(mods_est, 2, function(x) (x-Q_bar)^2)
models_demean
B <- (1/(m-1)) * rowSums(models_demean)
rowSums(models_demean)
(1/(m-1))
B <- (1/(m-1)) * rowSums(models_demean)
B
Var_Q_bar <- U_bar + (1 + (1/m))*B
Var_Q_bar
summary(models[[1]])
sqrt(Var_Q_bar)
m^-1
1+m^-1
t_stat <- (m-1)(1+(U_bar/((1+m^-1)*B)))^2
(m-1)(1+(U_bar/((1+m^-1)*B)))^2
-0.04654/0.06488
0.05909/0.06374
summary(models[[1]])[2,3]
summary(models[[1]])$coefficients[2,3]
data.frame(estimate = Q_bar,
std.error = Q_bar_se
)
Q_bar_var <- U_bar + (1 + (1/m))*B
Q_bar_se <- sqrt(Q_bar_bar)
mods_est <- sapply(models,
function (x) summary(x)$coefficients[,1],
simplify = "cbind")
mods_var <- sapply(models,
function (x) diag(vcov(x)),
simplify = "cbind")
m <- length(models)
Q_bar <- (1/m)*rowSums(mods_est)
U_bar <- (1/m)*rowSums(mods_var)
models_demean <- apply(mods_est, 2, function(x) (x-Q_bar)^2)
B <- (1/(m-1)) * rowSums(models_demean)
Q_bar_var <- U_bar + (1 + (1/m))*B
Q_bar_se <- sqrt(Q_bar_bar)
Q_bar_se <- sqrt(Q_bar_var)
combined_mat <- data.frame(estimate = Q_bar,
std.error = Q_bar_se
)
combined_mat
(1+(U_bar/((1+m^-1)*B)))
(1+(U_bar/((1+m^-1)*B)))^2
U_bar
(1+m^-1)
(1+m^-1)*B
(1+(U_bar/((1+m^-1)*B)))^2
(m-1)
(m-1)*(1+(U_bar/((1+m^-1)*B)))^2
(m-1)
U_bar
(1+m^-1)
(1+m^-1)*B
B
(1+m^-1)*B
models
models[[1]]$df.residual
v_m <- dof <- (m-1)*(1+(U_bar/((1+m^-1)*B)))^2
v_complete <- models[[1]]$df.residual
gamma <- ((1+m^-1)*B)/Q_bar_var
v_obs <- ((v_complete + 1)/(v_complete+3))*v_complete*(1-gamma)
v_corrected <- ((1/v_m) + (1/v_obs))^-1
v_corrected
dof <- v_corrected
dof
2 * pt(abs(statistic), dof, lower.tail = FALSE)
combined_mat <- data.frame(estimate = Q_bar,
std.error = Q_bar_se,
statistic = estimate/std.error,
p.value = 2 * pt(abs(statistic), dof, lower.tail = FALSE))
est = Q_bar
std.err = Q_bar_se
stat = est/std.err
combined_mat <- data.frame(estimate = est,
std.error = std.err,
statistic =stat,
p.value = 2 * pt(abs(stat), dof, lower.tail = FALSE))
combined_mat
summary(models[[1]])
combine <- function(df_list, mod_formula, ...) {
args <- list(...)
if (is.null(args[['family']])) {
cat("No model family specified -- assuming gaussian model.")
family <- gaussian
}
models <- lapply(df_list,
function (x) {
glm(mod_formula, data = x, family = family, ...)
})
mods_est <- sapply(models,
function (x) summary(x)$coefficients[,1],
simplify = "cbind")
mods_var <- sapply(models,
function (x) diag(vcov(x)),
simplify = "cbind")
m <- length(models)
Q_bar <- (1/m)*rowSums(mods_est)
U_bar <- (1/m)*rowSums(mods_var)
models_demean <- apply(mods_est, 2, function(x) (x-Q_bar)^2)
B <- (1/(m-1)) * rowSums(models_demean)
Q_bar_var <- U_bar + (1 + (1/m))*B
Q_bar_se <- sqrt(Q_bar_var)
v_m <- (m-1)*(1+(U_bar/((1+m^-1)*B)))^2
if (dof_adjust) {
v_complete <- models[[1]]$df.residual
gamma <- ((1+m^-1)*B)/Q_bar_var
v_obs <- ((v_complete + 1)/(v_complete+3))*v_complete*(1-gamma)
v_corrected <- ((1/v_m) + (1/v_obs))^-1
dof <- v_corrected
} else {
dof <- v_m
}
est = Q_bar
std.err = Q_bar_se
stat = est/std.err
combined_mat <- data.frame(estimate = est,
std.error = std.err,
statistic =stat,
p.value = 2 * pt(abs(stat), dof, lower.tail = FALSE))
return(combined_mat)
}
combine(complete_datasets,
formula = d~a+c+e+f)
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
combine(complete_datasets,
formula = d~a+c+e+f)
document()
combine(formula = d~a+c+e+f,
complete_datasets)
document()
combine(formula = d~a+c+e+f,
complete_datasets)
document()
combine(formula = d~a+c+e+f,
complete_datasets)
document()
document()
combine(formula = d~a+c+e+f,
complete_datasets)
combine(formula = d~a+c+e+f,
complete_datasets)
test >- combine(formula = d~a+c+e+f,
complete_datasets)
test <- combine(formula = d~a+c+e+f,
complete_datasets)
test
summary(glm(d ~ a +c +e +f, data = completed_datasets[[1]]))
summary(glm(d ~ a +c +e +f, data = complete_datasets[[1]]))
df_list <- complete_datasets
if (is.null(args[['family']])) {
cat("No model family specified -- assuming gaussian model.\n\n")
family <- gaussian
}
models <- lapply(df_list,
function (x) {
glm(formula, data = x, family = family)
})
family <- gaussian
models <- lapply(df_list,
function (x) {
glm(formula, data = x, family = family)
})
df_list
formula = d~a+c+e+f
models <- lapply(df_list,
function (x) {
glm(formula, data = x, family = family)
})
models
mods_est <- sapply(models,
function (x) summary(x)$coefficients[,1],
simplify = "cbind")
mods_var <- sapply(models,
function (x) diag(vcov(x)),
simplify = "cbind")
m <- length(models)
Q_bar <- (1/m)*rowSums(mods_est)
U_bar <- (1/m)*rowSums(mods_var)
models_demean <- apply(mods_est, 2, function(x) (x-Q_bar)^2)
B <- (1/(m-1)) * rowSums(models_demean)
Q_bar_var <- U_bar + (1 + (1/m))*B
Q_bar_se <- sqrt(Q_bar_var)
v_m <- (m-1)*(1+(U_bar/((1+m^-1)*B)))^2
dof_adjust
dof_adjust = TRUE
if (dof_adjust) {
v_complete <- models[[1]]$df.residual
gamma <- ((1+m^-1)*B)/Q_bar_var
v_obs <- ((v_complete + 1)/(v_complete+3))*v_complete*(1-gamma)
v_corrected <- ((1/v_m) + (1/v_obs))^-1
dof <- v_corrected
} else {
dof <- v_m
}
est = Q_bar
std.err = Q_bar_se
dof
test
dof_adjust = FALSE
if (dof_adjust) {
v_complete <- models[[1]]$df.residual
gamma <- ((1+m^-1)*B)/Q_bar_var
v_obs <- ((v_complete + 1)/(v_complete+3))*v_complete*(1-gamma)
v_corrected <- ((1/v_m) + (1/v_obs))^-1
dof <- v_corrected
} else {
dof <- v_m
}
dof
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
combine(formula = d~a+c+e+f,
complete_datasets)
document()
?combine
document()
?combine
