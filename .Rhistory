midas_comp <- round(midas_pool, 7)
identical(mice_comp, midas_comp)
all.equal(mice_comp, midas_comp)
mice_pool
midas_pool
summary(mice::pool(comp_mod))
document()
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
midas_pool
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("estimate","std.error","statistic","p.value")])
mice_pool
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
## Test:
mice_comp <- round(mice_pool, 7)
midas_comp <- round(midas_pool, 7)
midas_pool
mice_pool
mice_pool$p.value
typeof(mice_pool$p.value)
typeof(midas_pool$p.value)
typeof(mice_pool$p.value)
?as.double
document()
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
midas_pool
mice_pool
as.single(midas_pool$p.value)
document
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
midas_comp <- round(midas_pool, 7)
mice_pool <- as.data.frame(summary(mice::pool(comp_mod)))
midas_comp <- round(midas_pool[,-"term"], 7)
midas_comp <- round(midas_pool[,-c("term")], 7)
document()
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod)))
midas_pool
mice_pool
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 7)
mice_test <- round(mice_test, 7)
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 7)
mice_test <- round(mice_test, 7)
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 7)
mice_test <- round(mice_test, 7)
identical(mid_test, mice_test)
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 11)
mice_test <- round(mice_test, 11)
identical(mid_test, mice_test)
mid_test
mice_test
identical(mid_test, mice_test)
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod)))
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 11)
mice_test <- round(mice_test, 11)
identical(mid_test, mice_test)
usethis::use_testhat()
usethis::use_testthat()
usethis::use_test()
setwd("~/Dropbox/rMIDAS")
usethis::use_test()
library(usethis)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
test()
test()
test()
setwd("~/Dropbox/rMIDAS")
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = b*rnorm(1000)))
data.frame(a = rnorm(1000),
b = runif(1000),
c = b*rnorm(1000))
test_dfs <- lapply(1:5, function (x) data.frame("a" = rnorm(1000),
"b" = runif(1000),
"c" = b*rnorm(1000)))
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
test_dfs[[1]]
midas <- combine("a ~ b + c", df_list = test_dfs)
?mice::pool
midas_res <- combine("a ~ b + c", df_list = test_dfs)
mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
expect_equal(mid_test, mice_test)
expect_equal
test()
devtools::check()
library(mice)
devtools::check()
set.seed(89)
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
mice_res
summary(mice)
summary(mice_res)
set.seed(89)
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
midas_res <- combine("a ~ b + c", df_list = test_dfs)
# mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
summary(mice_res)
test()
test()
test()
summary(mice_res)
set.seed(89)
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
midas_res <- combine("a ~ b + c", df_list = test_dfs)
mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
summary(mice_res)
midas_res$df[1]
round(midas_res$df[1],9)
expect_equal(round(midas_res$df[1],9), 23.59657)
round(midas_res$df[1],9)
round(midas_res$df[1],9) == 23.59657
round(midas_res$df[1],3) == 23.597
test
test()
check()
check()
document()
?train
check()
check()
document
document()
?convert
test_data <- raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE))
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE))
converted_data <-convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equals(ncol(converted_data), 5)
expect_equal(ncol(converted_data), 5)
ncol(converted_data)
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equal(length(converted_data), 5)
expect_equal(ncol(converted_data$data), 5)
expect_equal("a_red" %in% colnames(converted_data$data), TRUE)
expect_equal(sum(converted_data$data[["b"]] > 1), 0)
range(converted_data$data[["b"]])
seq(0.265,1000)
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = seq(0.265,1000),
c = sample(c("YES","NO",NA),1000,replace=TRUE))
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equal(length(converted_data), 5)
expect_equal(ncol(converted_data$data), 5)
expect_equal("a_red" %in% colnames(converted_data$data), TRUE)
expect_equal(range(converted_data$data[["b"]]), c(0,1))
range(converted_data$data[["b"]])
test()
expect_equal(typeof(converted_data$data[["c"]]), "as.numeric")
expect_equal(typeof(converted_data$data[["c"]]), "as.integer")
expect_equal(typeof(converted_data$data[["c"]]), "integer")
check()
check()
check()
use_apl2_license()
use_apl2_license("Apache License (=2.0)")
check()
use_apl2_license("Apache License (=2.0)")
check()
check()
?pt
packageName::
packageName::sadf
check()
document()
check()
check()
check()
check()
check()
reticulate::use_condaenv()
reticulate::use_condaenv()?
?reticulate::use_condaenv
check()
check()
check()
check()
check()
system.file
?system.file
base::system.file
check()
check()
check()
tempdir()
document()
check()
library(usethis)
use_logo("man/figures/rMIDAS_logo.png", geometry = "240x278", retina = TRUE)
setwd("~/Dropbox/rMIDAS")
library(devtools, roxygen2)
document
document()
install(rMIDAS)
document()
library(mltools)
install.packages("mltools")
document()
remove.packages("mltools")
document()
install.packages("mltools")
install.packages("mltools")
document()
library(devtools, roxygen2)
document()
check()
check()
check()
skip_if_no_numpy()
skip_if_no_numpy()
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = seq(0.265,1000),
c = sample(c("YES","NO",NA),1000,replace=TRUE))
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = seq(0.265,1000),
c = sample(c("YES","NO",NA),1000,replace=TRUE),
stringsAsFactors = FALSE)
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equal(length(converted_data), 5)
expect_equal(ncol(converted_data$data), 5)
expect_equal("a_red" %in% colnames(converted_data$data), TRUE)
check()
check()
check()
check()
library(devtools, roxygen2)
check()
check()
check()
check()
check_rhub()
reticulate::r_to_py(data.frame(NA))
na_conv <- na_to_nan(data.frame(NA))
na_conv
reticulate::r_to_py(na_conv)
na_conv <- na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
na_conv
check()
check()
check()
check_rhub()
build_win()
devtools::build_manual()
check_rhub()
library(devtools, roxygen2)
check_rhub()
check_win_devel()
check_win_release()
release()
spell_check()
release()
release()
release()
library(devtools, roxygen2)
document()
na_conv <- na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
na_conv
na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
path = "python3"
exact = FALSE
set_py_attempt <- try(reticulate::use_python(python = path, required = exact),
silent = TRUE)
set_py_attempt
document()
set_python_env(path)
#' @param path Character string, path to python binary if `type == "auto"`, path to virtualenv if `type == "virtualenv"`, or the name of a Conda environment if `type=="condaenv`
#' @param exact Boolean. If `TRUE` then only load exact match from `path`, otherwise allow reticulate to scan for other versions.
#' @param ... Further argument passed to reticulate::use_condaenv() for `conda` executable if `type == "condaenv"`.
#' @keywords setup
#' @export
#' @return Boolean indicating whether setup passed without errors
#' @examples
#' \donttest{
#' set_python_env(path = "~/.path/to/python/binary", type = "auto", exact = FALSE)
#' }
set_python_env <- function(path, type = "auto", exact = FALSE,...) {
set_complete <- FALSE
if (type == "auto") {
set_py_attempt <- try(reticulate::use_python(python = path, required = exact),
silent = TRUE)
} else if (type == "virtualenv") {
set_py_attempt <- try(reticulate::use_virtualenv(virtualenv = path, required = exact),
silent = TRUE)
} else if (type == "condaenv") {
set_py_attempt <- try(reticulate::use_condaenv(condaenv = path, required = exact, ...),
silent = TRUE)
} else {
stop("Type of configuration not recognised; 'type' should be one of 'auto','virtualenv','condaenv'")
}
if ("try-error" %in% class(set_py_attempt)) {
stop("Setting user-specified python environment '",path, "' failed.\n Please check the specified path and try again.")
} else {
message("Proceeding to check/install Python package dependencies.")
mid_py_setup()
}
set_complete <- TRUE
return(set_complete)
}
devtools::check()
devtools::check(run_dont_test = FALSE)
?overimpute()
devtools::check(cran = TRUE)
devtools::check(cran = TRUE)
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
midas_pool
check_rhub()
check_rhub()
skip_if_no_numpy()
if (reticulate::py_module_available("numpy")) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
}
if (reticulate::py_module_available("numpy")) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
reticulate::py_module_available("numpy")
check()
check_rhub()
?getFunction
check()
check_rhub()
?set_python_env
document()
?set
?set_python_env
check_win_devel()
check_win_release()
check_rhub()
?checkCRAN
?check
check_win_devel()
check_win_release()
?train
test <- skip_if_no_numpy()
test <- skip_if_no_numpy()
test <- mid_py_setup()
document()
?mid_py_setup
document()
