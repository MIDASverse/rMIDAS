bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(data = test_data)
test <- list()
setattr(test, "new_attr","hello")
attr(test,"new_attr")
test2 <- data.frame()
attr(test2, "new_attr")
attr(test2, "new_attr") == "midas_pre"
if (attr(test2, "new_attr") == "midas_pre") cat("hello")
#'                   b = 1:100,
#'                   c = sample(c("YES","NO",NA),100,replace = TRUE),
#'                   d = runif(100),
#'                   e = sample(c("YES","NO"), 100, replace = TRUE),
#'                   f = sample(c("male","female","trans","other",NA), 100, replace = TRUE))
#'
#' bin <- c("c","e")
#' cat <- c("a","f")
#'
#' convert(data, bin_cols = bin, cat_cols = cat)
convert <- function(data, bin_cols, cat_cols, minmax_scale = FALSE) {
# Check data input
if ("character" %in% class(data)) {
data.table::fread(data)
} else  if (!("data.table" %in% class(data))) {
data.table::setDT(data)
}
# Check all column names are present
all_names <- c(bin_cols, cat_cols)
if (sum(all_names %in% names(data)) != length(all_names)) {
name_errs <- all_names[!(all_names %in% names(data))]
stop("The following column names could not be found in the data: ",
paste0("'",name_errs,sep="' "))
}
# Check no overlap between bin and cat
if (length(intersect(bin_cols, cat_cols)) > 0) {
stop("At least one variable name is duplicated in the binary and categorical arguments.")
}
# Separate the data by class
data_bin <- data[,bin_cols, with = FALSE]
data_cat <- data[,cat_cols, with = FALSE]
data_num <- data[,setdiff(names(data),all_names), with = FALSE]
num_cols <- names(data_num)
# One-hot encode categorical
cat_lists <- NULL
data_cat_oh <- NULL
if (ncol(data_cat) > 0) {
data_cat[,(cat_cols):=lapply(.SD, as.factor),.SDcols=cat_cols]
data_cat_oh <- mltools::one_hot(data_cat, cols = names(data_cat))
cat_lists <- lapply(cat_cols,
function(x) c(names(data_cat_oh)[startsWith(names(data_cat_oh),paste0(x,"_"))]))
}
## Check binary columns
# List to store conversions
bin_labs <- list()
# For each binary column, check they are indeed binary,
#   convert if necessary, and store corresponding labels
for (bin_col in bin_cols) {
b_vals <- c(unique(data_bin[,bin_col, with=FALSE]))[[1]]
if (!(sum(!is.na(b_vals)) == 2)) {
stop("Column '",bin_col,"' does not have two non-missing values")
} else if (sum(b_vals[!is.na(b_vals)] %in% c(1,2)) != 2) {
data_bin[,bin_col] <- ifelse(data_bin[,bin_col, with = FALSE] == b_vals[!is.na(b_vals)][1],
1L,0L)
}
bin_labs[[bin_col]] <- b_vals[!is.na(b_vals)]
}
# Min-max scale
minmax_params <- NULL
if (minmax_scale) {
minmax_params <- lapply(data_num, function(x) {return(list(min = min(x, na.rm = TRUE),
max = max(x, na.rm = TRUE)))})
data_num[,(num_cols):=lapply(.SD, col_minmax),.SDcols=num_cols]
}
data_conv <- cbind(data_num, data_bin, data_cat_oh)
type_check <- data_conv[,lapply(.SD, is.character)]
if (sum(type_check == TRUE) > 0) {
type_vars <- names(type_check)[type_check == TRUE]
warning("The following columns have not been converted to a numeric type: ",
paste0("'",type_vars, sep ="' "))
}
out <- list(data = data_conv,
bin_list = bin_labs,
cat_lists = cat_lists,
cat_names = names(data_cat),
minmax_params = minmax_params)
attr(out, "class") <- "mid_pre"
return(out)
}
test <- list()
attr(test, "class") <- "tom"
class(test)
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
class(test_data)
# Run imputations
test_imp <- train(data = test_data)
class(test_imp)
# Run imputations
test_imp <- train(test_data)
class(test_data)
class(test_imp)
document()
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
test_imp$preproc
class(test_imp$preproc)
exists(test_imp$preproc)
exists(test_imp)
class(test_imp)
is.null(test_imp$act)
is.null(test_imp$tom_new_var)
attributes(test_imp)
test_imp[[pre_proc]]
test_imp[["pre_proc"]]
test_imp["pre_proc"]
test_imp$preproc
test_imp$hello
try(test_imp$hello)
try(test_imp$hello, silent = TRUE)
test <- try(test_imp$hello, silent = TRUE)
test
document()
test <- complete(test_imp)
test <- data.frame(a = 2, b 3:5)
test <- data.frame(a = 2, b = 3:5)
test
as.data.table(test)
test
test
test
class(test)
names(test_imp)
mid_obj <- test_imp
mid_obj$preproc
mid_obj$preproc$bin_list
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
mid_obj <- test_imp
if (!("midas_base.Midas" %in% class(mid_obj))) {
stop("Trained midas object not supplied to 'mid_obj' argument")
}
(!("midas_base.Midas" %in% class(mid_obj)))
(!("preproc" %in% names(mid_obj)))
mid_obj
names(mid_obj)
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
test_imp$preproc
test_imp$preproc$var_names
test_imp$preproc$var_names$bin_names
mid_obj <- test_imp
mid_obj$preproc$minmax_params
num_cols <- names(mid_obj$preproc$minmax_params)
num_cols
mid_obj$preproc$minmax_params[[1]]
mid_obj$preproc$minmax_params[1]
names(mid_obj$preproc$minmax_params[1])
s_test <- test_data$data[['b']]
s_test
names(s_test)
name(s_test)
colname(s_test)
colnames(test_data$data$b)
colname(test_data$data$b)
names(test_data$data)
names(test_data$data$b)
names(test_data$data['b'])
names(test_data$data[['b']]
)
num_params <- mid_obj$preproc$minmax_params
num_cols <- names(num_params)
num_cols
test_data$data[["a"]]
test_data$data
test_data$data[["b"]]
num_params['b']
num_params[['b']]
num_params[['b']]$min
df <- test_data$data
df
num_params <- mid_obj$preproc$minmax_params
num_cols <- names(num_params)
for (j in num_cols) {
set(df, j = j, value = un_scale(df[[j]], s_min = num_params[[j]]$min, s_max = num_params[[j]]$max))
}
document()
df <- as.data.table(df)
num_params <- mid_obj$preproc$minmax_params
num_cols <- names(num_params)
df
for (j in num_cols) {
set(df, j = j, value = un_scale(df[[j]], s_min = num_params[[j]]$min, s_max = num_params[[j]]$max))
}
document()
df <- as.data.table(df)
df
num_params <- mid_obj$preproc$minmax_params
num_cols <- names(num_params)
for (j in num_cols) {
set(df, j = j, value = un_scale(df[[j]], s_min = num_params[[j]]$min, s_max = num_params[[j]]$max))
}
df
raw_data[,c("b","d")]
df[,c("b","D")]
df[,c("b","d")]
ex_num <- runif(100,1,10)
scaled <- col_minmax(ex_num)
ex_num_undo <- undo_minmax(scaled, s_min = min(ex_num), s_max = max(ex_num))
document()
ex_num_undo <- undo_minmax(scaled, s_min = min(ex_num), s_max = max(ex_num))
identical(ex_num, ex_num_undo)
ex_num
ex_num_undo
all.equal(ex_num, ex_num_undo)
mid_obj$preproc$bin_list
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
bin_cols
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
bin_params
bin_cols
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][0]))
}
df
raw_data
test
x_t <- c(1,0,0,1,1,0)
one_t <- "yes"
zero_t <- "no"
add_bin_labels(x_t, one = one_t, zero = zero_t)
print(add_bin_labels(x_t, one = one_t, zero = zero_t))
document()
df
df
document()
df <- raw_df
df <- raw_data
df
df <- test_data$data
df
df <- as.data.table(df)
num_params <- mid_obj$preproc$minmax_params
num_cols <- names(num_params)
for (j in num_cols) {
set(df, j = j, value = un_scale(df[[j]], s_min = num_params[[j]]$min, s_max = num_params[[j]]$max))
}
document()
df
for (j in num_cols) {
set(df, j = j, value = undo_minmax(df[[j]], s_min = num_params[[j]]$min, s_max = num_params[[j]]$max))
}
df
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][0]))
}
df
df[['c']]
df
raw_data
df <- test_data$data
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
Df
df
document()
df <- test_data$data
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
df
bin_params[['c']]
test_data$data
raw_data
df <- copy(raw_data)
df
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
df
raw_data
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
df<-test_data$data
bin_params <- mid_obj$preproc$bin_list
mid_obj <- test_imp
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
df
raw_data
cat_params <- mid_obj$preproc$cat_lists
cat_params
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
library(tidyverse)
library(ggpubr)
library(stargazer)
library(miceadds)
#### READ DATA ####
COVID_clean <- readRDS("pretest.RDS")
COVID_clean <- COVID_clean %>% mutate(rid = row_number())
# Recode Education
COVID_clean <- COVID_clean %>%
mutate(educ_gps = if_else(educ_gps == "Completed four years of education beyond", "Completed four years of education beyond",
if_else(educ_gps == "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed")))
# Recode Gender
COVID_clean <- COVID_clean %>%
mutate(Sex = if_else(gender == "Female", "Female",
if_else(gender == "Male", "Male", "Female")))
COVID_clean$population <- as.numeric(COVID_clean$population)
COVID_clean$gdp_2018 <- as.numeric(COVID_clean$gdp_2018)
COVID_clean$gdp_pc <- COVID_clean$gdp_2018/COVID_clean$population*1000
COVID_clean$gdp_stan_chile <- NA
COVID_clean$gdp_stan_china <- NA
COVID_clean$gdp_stan_italy <- NA
COVID_clean$gdp_pc_chile <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_chile [COVID_clean$country != "Chile"] <- NA
COVID_clean$gdp_pc_china <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_china [COVID_clean$country != "China"] <- NA
COVID_clean$gdp_pc_italy <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_italy [COVID_clean$country != "Italy"] <- NA
COVID_clean$gdp_stan_chile <- as.vector(scale(COVID_clean$gdp_pc_chile))
COVID_clean$gdp_stan_china <- as.vector(scale(COVID_clean$gdp_pc_china))
COVID_clean$gdp_stan_italy  <- as.vector(scale(COVID_clean$gdp_pc_italy))
COVID_clean$gdp_stan <- coalesce(COVID_clean$gdp_stan_chile, COVID_clean$gdp_stan_china, COVID_clean$gdp_stan_italy)
COVID_clean <-
mutate(COVID_clean,
infect_rate_chile = ifelse(country=="Chile",infection_rate, NA),
infect_rate_china = ifelse(country=="China",infection_rate, NA),
infect_rate_italy = ifelse(country=="Italy",infection_rate, NA)) %>%
mutate_at(all_of(c("infect_rate_chile", "infect_rate_china","infect_rate_italy")),
function(x) {ifelse(x > quantile(x,0.75,na.rm=TRUE),"High",
ifelse(x < quantile(x,0.25, na.rm = TRUE),"Low","Medium"))}) %>%
mutate(infection_cat = coalesce(infect_rate_chile, infect_rate_china, infect_rate_italy)) %>%
mutate(infection_cat = factor(infection_cat, levels = c("Low","Medium","High")))
COVID_clean$infect_rate_chile <- NULL
COVID_clean$infect_rate_china <- NULL
COVID_clean$infect_rate_italy <- NULL
setwd("~/Dropbox/Tom COVID-19/COVID survey")
library(tidyverse)
library(ggpubr)
library(stargazer)
library(miceadds)
#### READ DATA ####
COVID_clean <- readRDS("pretest.RDS")
COVID_clean <- COVID_clean %>% mutate(rid = row_number())
# Recode Education
COVID_clean <- COVID_clean %>%
mutate(educ_gps = if_else(educ_gps == "Completed four years of education beyond", "Completed four years of education beyond",
if_else(educ_gps == "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed")))
# Recode Gender
COVID_clean <- COVID_clean %>%
mutate(Sex = if_else(gender == "Female", "Female",
if_else(gender == "Male", "Male", "Female")))
COVID_clean$population <- as.numeric(COVID_clean$population)
COVID_clean$gdp_2018 <- as.numeric(COVID_clean$gdp_2018)
COVID_clean$gdp_pc <- COVID_clean$gdp_2018/COVID_clean$population*1000
COVID_clean$gdp_stan_chile <- NA
COVID_clean$gdp_stan_china <- NA
COVID_clean$gdp_stan_italy <- NA
COVID_clean$gdp_pc_chile <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_chile [COVID_clean$country != "Chile"] <- NA
COVID_clean$gdp_pc_china <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_china [COVID_clean$country != "China"] <- NA
COVID_clean$gdp_pc_italy <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_italy [COVID_clean$country != "Italy"] <- NA
COVID_clean$gdp_stan_chile <- as.vector(scale(COVID_clean$gdp_pc_chile))
COVID_clean$gdp_stan_china <- as.vector(scale(COVID_clean$gdp_pc_china))
COVID_clean$gdp_stan_italy  <- as.vector(scale(COVID_clean$gdp_pc_italy))
COVID_clean$gdp_stan <- coalesce(COVID_clean$gdp_stan_chile, COVID_clean$gdp_stan_china, COVID_clean$gdp_stan_italy)
COVID_clean <-
mutate(COVID_clean,
infect_rate_chile = ifelse(country=="Chile",infection_rate, NA),
infect_rate_china = ifelse(country=="China",infection_rate, NA),
infect_rate_italy = ifelse(country=="Italy",infection_rate, NA)) %>%
mutate_at(all_of(c("infect_rate_chile", "infect_rate_china","infect_rate_italy")),
function(x) {ifelse(x > quantile(x,0.75,na.rm=TRUE),"High",
ifelse(x < quantile(x,0.25, na.rm = TRUE),"Low","Medium"))}) %>%
mutate(infection_cat = coalesce(infect_rate_chile, infect_rate_china, infect_rate_italy)) %>%
mutate(infection_cat = factor(infection_cat, levels = c("Low","Medium","High")))
COVID_clean$infect_rate_chile <- NULL
COVID_clean$infect_rate_china <- NULL
COVID_clean$infect_rate_italy <- NULL
summary(COVID_clean$infection_rate[COVID_clean$country == "Chile"])
