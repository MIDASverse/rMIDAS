training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
check()
library(devtools)
check()
check_rhub()
check_win_devel()
check_win_release()
check()
library(devtools)
load_all()
if (python_configured()) {
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
}
set_python_env("no_tf", type = "conda")
if (python_configured()) {
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
}
python_configured()
check()
release()
release()
library(rfsrc)
library(randomForestSRC)
install.packages("randomForestSRC")
library(randomForestSRC)
rfsrc.new()
rfsrc.news()
data(veteran, package = "randomForestSRC")
v.obj <- rfsrc(Surv(time,status)~., veteran, ntree = 100)
plot.variable(v.obj, plots.per.page = 3)
plot.variable(v.obj, plots.per.page = 2, xvar.names = c("trt", "karno", "age"))
plot.variable(v.obj, surv.type = "surv", nvar = 1, time = 200)
plot.variable(v.obj, surv.type = "surv", partial = TRUE, smooth.lines = TRUE)
plot.variable(v.obj, surv.type = "surv", partial = TRUE, smooth.lines = TRUE)
library(jmv)
library(tidyverse)
library(haven)
setwd("~/Dropbox/durham/rpir_21/rpir_labs")
vdem <- read_csv("data/rpir_vdem.csv")
View(vdem)
vdem_2000 <- filter(vdem, year == 2000)
View(vdem_2000)
descriptives(vdem_2000, "v2x_partipdem")
vdem_2000[vdem_2000$country_name == "Norway",]
descriptives(vdem_2000, "v2x_partipdem")
vdem_2000[vdem_2000$country_name == "Norway",]
vdem_1980 <- filter(vdem, year == 1980)
descriptives(vdem_1980, "v2x_partipdem")
View(vdem_1980)
ttestIS(vdem, v2x_delibdem = TRUE)
View(vdem)
ttestIS(vdem, v2x_delibdem, group = e_civil_war,
welchs = TRUE, students = FALSE)
vdem$v2x_delibdem
vdem$e_civil_war == 0
vdem$v2x_delibdem[vdem$e_civil_war == 0]
vdem$v2x_delibdem[vdem$e_civil_war == 1]
t.test(vdem$v2x_delibdem[vdem$e_civil_war == 0],
vdem$v2x_delibdem[vdem$e_civil_war == 1])
0.2775303 - 0.1511950
vdem_2000[vdem_2000$country_name == "Norway",]
vdem_comp <- vdem_1980 %>%
mutate(overall_dem = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
View(vdem_comp)
vdem_1980 <- vdem_1980 %>%
mutate(dem_comp = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
t.test(vdem_1980$dem_comp[vdem_1980$e_civil_war == 0],
vdem_1980$dem_comp[vdem_1980$e_civil_war == 1])
0.000001089 < 0.05
ttestIS(vdem_1980, dem_comp, group = e_civil_war,
welchs = TRUE, students = FALSE)
0.0000011 < 0.05
t.test(vdem$v2x_delibdem[vdem$e_civil_war == 0],
vdem$v2x_delibdem[vdem$e_civil_war == 1])
0.2775303 - 0.1511950
t.test(vdem_1980$dem_comp[vdem_1980$e_civil_war == 0],
vdem_1980$dem_comp[vdem_1980$e_civil_war == 1])
1.3773386 - 0.4898333
# Democracy composite:
1.3773386 - 0.4898333
# Deliberative diff:
0.1263353
(1.3773386 - 0.4898333)/5
t.test(vdem_1980$dem_comp[vdem_1980$e_miinterc == 0],
vdem_1980$dem_comp[vdem_1980$e_miinterc == 1])
0.1273 < 0.05
t.test(vdem_1980$dem_comp[vdem_1980$e_miinterc == 0],
vdem_1980$dem_comp[vdem_1980$e_miinterc == 1])
setwd("~/Dropbox/durham/rpir_21/rpir_labs")
library(jmv)
library(tidyverse)
library(haven)
read_csv("data/rpir_vdem.csv")
vdem <- read_csv("data/rpir_vdem.csv")
View(vdem)
vdem_2000 <- filter(vdem, year %in% c(2000))
vdem_2000 <- filter(vdem, year %in% 2000)
vdem_2000 <- filter(vdem, year == 2000)
vdem_2000 <- filter(vdem, year %in% c(2000))
vdem_2000 <- filter(vdem, year == 2000)
View(vdem_2000)
descriptives(vdem_2000, c(v2x_libdem, e_civil_war))
descriptives(vdem_2000, c(v2x_partipdem, e_civil_war))
vdem_2000$v2x_partipdem[vdem_2000$country_name == "Norway"]
vdem_2000$v2x_partipdem[vdem_2000$country_name == "Belgium"]
vdem_2000$v2x_partipdem[vdem_2000$country_name == "United States"]
vdem_2000$v2x_partipdem[vdem_2000$country_name == "United States of America"]
vdem_1980 <- filter(vdem, year == 1980)
descriptives(vdem_1980, c(v2x_partipdem, e_civil_war))
0.3171761
vdem_1980$e_civil_war == 1
vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 1]
vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 0]
t.test(vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 1],
vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 0])
t.test(vdem$v2x_delibdem[vdem$e_civil_war == 1],
vdem$v2x_delibdem[vdem$e_civil_war == 0])
0.2775303 - 0.1511950
mutate(dem_comp = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
vdem_1980 <- vdem_1980 %>%
mutate(dem_comp = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
View(vdem_1980)
t.test(vdem_1980$dem_comp[vdem_1980$e_civil_war==1],
vdem_1980$dem_comp[vdem_1980$e_civil_war==0])
0.000001089 < 0.05
1.089e-06 < 0.05
1.3773386 - 0.4898333
0.1263353
0.1263353/1
0.8875053/5
t.test(vdem_1980$dem_comp[vdem_1980$e_miinterc==1],
vdem_1980$dem_comp[vdem_1980$e_miinterc==0])
setwd("~/Dropbox/Exper_selec")
library(tidyverse)
full_data <- read_csv("Data/experiment/full_results_280522.csv")
#### 0. WRANGLE DATA ####
pair_data <- read_csv("exp_v1.8/_static/mind_and_machine/data_for_vignettes.csv")
## Calculate difference in profiles between candidates
img_similarity <- read_csv("Data/chosen_pairs_a.csv") %>%
select(national_id, faceplusplus_similarity) %>%
rbind(read_csv("Data/chosen_pairs_b.csv") %>%
select(national_id, faceplus_similarity) %>%
rename(faceplusplus_similarity = faceplus_similarity)) %>%
mutate(diff_cand_img = 100-faceplusplus_similarity) %>%
select(-faceplusplus_similarity)
full_pair_data <- read_csv("Data/full_vignette_data.csv") %>%
mutate(pol_exp = ifelse(grepl("no ha sido", pol_exp), 0, 1),
priv_propor = as.numeric(sub("\\%.*", "", priv_proportion)),
large_don_prop = as.numeric(sub("\\%.*", "", largest_donor))) %>%
select(block, pair, candidate, national_id, pol_exp, priv_propor, large_don_prop, log_income)
corrupt_cands <- full_pair_data %>%
filter(candidate == 1) %>%
select(-block, -pair, -candidate, -national_id) %>%
as.matrix(.)
uncorrupt_cands <-full_pair_data %>%
filter(candidate == 2) %>%
select(-block, -pair, -candidate, -national_id) %>%
as.matrix(.)
cand_diffs <- full_pair_data %>%
filter(candidate == 1) %>%
select(block, pair, national_id) %>%
cbind(as.data.frame(abs(corrupt_cands-uncorrupt_cands))) %>%
rename_with(function (x) paste0("diff_",x), !all_of(c("block","pair","national_id"))) %>%
left_join(img_similarity, by = "national_id") %>%
select(-national_id)
## Split out pre-treatment survey
subj_data <- full_data %>%
select(label, starts_with("Q_"), "region")
## Get attribute names
atts <- colnames(pair_data)[4:8]
exp_data <- full_data %>%
select("label", starts_with(c("Block_","blocks_","pair_","attributes_","candidates_","attribute_"))) %>%
pivot_longer(cols = starts_with("Block_"), names_to = "vignette", values_to = "cand_id") %>%
# Format experimental columns
mutate(block = str_sub(cand_id,1,1),
pair = as.numeric(str_sub(cand_id,3,3)),
cand = str_sub(cand_id,5,5),
hidden_att = ifelse(block == "A",str_sub(attribute_hidden_A, (pair*4)-1, (pair*4)-1), NA),
hidden_att_name = atts[as.numeric(hidden_att)-3],
hidden_att_name = relevel(as.factor(hidden_att_name), ref = "pol_exp")) %>%
# Format outcomes
mutate(measure = ifelse(grepl("corruption",vignette),"corrupt","vote"),
chose_corrupt = ifelse(cand == 1, 1, 0)) %>%
left_join(subj_data, by = "label") %>%
left_join(cand_diffs, by = c("block","pair"))
b_cm_data <- summary(b_cm_corrupt)$coefficients
#### Block B ####
chosen_pairs_b <- read_csv("Data/chosen_pairs_b.csv") %>%
select(set, national_id)
b_sets <- full_pair_data %>%
filter(candidate == 1, block == "B") %>%
select(block, pair, national_id) %>%
left_join(chosen_pairs_b, by = "national_id") %>%
select(pair, set)
block_b <- exp_data %>% filter(block == "B") %>% left_join(b_sets, by = "pair")
for (i in 1:5) {
block_b[[paste0("D_",b_sets[i,'set'])]] <- ifelse(as.numeric(block_b$pair) == i, 0, 1)
}
block_b$pair <- relevel(as.factor(block_b$pair), ref = "6")
block_b$set <- relevel(as.factor(block_b$set), ref = "reference")
# Conditional means
b_cm_corrupt <- lm(chose_corrupt ~ set, data = block_b[block_b$measure == "corrupt",])
b_cm_vote <- lm(chose_corrupt ~ set, data = block_b[block_b$measure == "vote",])
b_cm_data <- summary(b_cm_corrupt)$coefficients
b_cm_data
b_cm_data$type <- "Corrupt"
b_cm_data
b_cm_data <- as.data.frame(summary(b_cm_corrupt)$coefficients)
b_cm_data$type <- "Corrupt"
b_cm_data
b_cm_vote_data <- as.data.frame(summary(b_cm_vote)$coefficients)
b_cm_vote_data$type <- "Vote"
b_cm_corrupt_data$term <- rownames(b_cm_corrupt_data)
b_cm_corrupt_data <- as.data.frame(summary(b_cm_corrupt)$coefficients)
b_cm_corrupt_data$type <- "Corrupt"
b_cm_corrupt_data$term <- rownames(b_cm_corrupt_data)
b_cm_vote_data$term <- rownames(b_cm_vote_data)
b_cm_data <- cbind(b_cm_corrupt_data, b_cm_vote_data)
b_cm_data
b_cm_data <- rbind(b_cm_corrupt_data, b_cm_vote_data)
b_cm_data
ggplot(b_cm_data, aes(x = Estimate,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0.5, linetype = "dashed") +
theme_minimal() +
labs(x = "Estimate (+ 95% CI)", y = "Profile", color = "Outcome")
ggplot(b_cm_data, aes(x = Estimate,
y = Term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0.5, linetype = "dashed") +
theme_minimal() +
labs(x = "Estimate (+ 95% CI)", y = "Profile", color = "Outcome")
ggplot(b_cm_data, aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0.5, linetype = "dashed") +
theme_minimal() +
labs(x = "Estimate (+ 95% CI)", y = "Profile", color = "Outcome")
ggplot(b_cm_data, aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(x = "Estimate (+ 95% CI)", y = "Profile", color = "Outcome")
?grepl
b_cm_data <- rbind(b_cm_corrupt_data, b_cm_vote_data) %>%
mutate(term = case_when(grepl("income", term) ~ "Total income",
grepl("priv_prop", term) ~ "Private Proportion",
grepl("large_don", term) ~ "Largest Donor Proportion",
grepl("cand_img", term) ~ "Candidate Image",
grepl("pol_exp", term) ~ "Political Experience"))
b_cm_data
b_cm_data <- rbind(b_cm_corrupt_data, b_cm_vote_data) %>%
mutate(term = case_when(grepl("income", term) ~ "Total income",
grepl("priv_prop", term) ~ "Private Proportion",
grepl("large_don", term) ~ "Largest Donor Proportion",
grepl("cand_img", term) ~ "Candidate Image",
grepl("pol_exp", term) ~ "Political Experience")) %>%
filter(!is.na(term))
ggplot(b_cm_data, aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(x = "Estimate (+ 95% CI)", y = "Profile", color = "Outcome")
colnames(b_cm_data)
ggplot(b_cm_data, aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(x = "Marginal difference compared to reference vignette (+ 95% CI)", y = "Profile", color = "Outcome")
b_cm_plot <- ggplot(b_cm_data, aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(x = "Marginal difference compared to reference vignette (+ 95% CI)", y = "Profile", color = "Outcome")
ggsave(b_cm_plot,"Figures/B_CMs.pdf")
b_cm_plot <- ggplot(b_cm_data, aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(x = "Marginal difference compared to reference vignette (+ 95% CI)", y = "Profile", color = "Outcome")
ggsave(b_cm_plot,"Figures/B_CMs.pdf")
ggsave(plot = b_cm_plot,"Figures/B_CMs.pdf")
b_cm_plot <- b_cm_data %>%
filter(!is.na(term)) %>%
ggplot(aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(x = "Marginal difference compared to reference vignette (+ 95% CI)", y = "Profile", color = "Outcome")
plot(b_cm_plot)
b_cm_data
b_cm_corrupt_data <- as.data.frame(summary(b_cm_corrupt)$coefficients)
b_cm_corrupt_data$type <- "Corrupt"
b_cm_corrupt_data$term <- rownames(b_cm_corrupt_data)
b_cm_vote_data <- as.data.frame(summary(b_cm_vote)$coefficients)
b_cm_vote_data$type <- "Vote"
b_cm_vote_data$term <- rownames(b_cm_vote_data)
b_cm_data <- rbind(b_cm_corrupt_data, b_cm_vote_data) %>%
mutate(term = case_when(grepl("income", term) ~ "Log income",
grepl("priv_prop", term) ~ "Private Proportion",
grepl("large_don", term) ~ "Largest Donor Proportion",
grepl("cand_img", term) ~ "Candidate Image",
grepl("pol_exp", term) ~ "Political Experience"))
b_cm_data
# Standardised
b_corrupt_intcpt <- b_cm_data$Estimate[b_cm_data$type == "Corrupt" & is.na(b_cm_data$term)]
b_vote_intcpt <-  b_cm_data$Estimate[b_cm_data$type == "Vote" & is.na(b_cm_data$term)]
b_corrupt_intcpt
b_vote_intcpt
b_cm_data_std <- b_cm_data %>%
mutate(Estimate = case_when(type == "Corrupt" ~ Estimate/b_corrupt_intcpt,
type == "Vote" ~ Estimate/b_vote_intcpt))
b_cm_data_std
b_cm_data_std <- b_cm_data %>%
mutate(Estimate = case_when(type == "Corrupt" ~ Estimate/b_corrupt_intcpt,
type == "Vote" ~ Estimate/b_vote_intcpt),
`Std. Error` = case_when(type == "Corrupt" ~ `Std. Error`/b_corrupt_intcpt,
type == "Vote" ~ `Std. Error`/b_vote_intcpt))
b_cm_plot_std <- b_cm_data_std %>%
filter(!is.na(term)) %>%
ggplot(aes(x = Estimate,
y = term,
xmin = Estimate - 1.96*`Std. Error`,
xmax = Estimate + 1.96*`Std. Error`,
color = type)) +
geom_point() +
geom_errorbarh(height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(x = "Relative change in choosing corrupt candidate (+ 95% CI)", y = "Profile", color = "Outcome")
plot(b_cm_plot_std)
ggsave(plot = b_cm_plot_std,"Figures/B_CMs_std.pdf")
