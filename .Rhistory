Df
df
document()
df <- test_data$data
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
df
bin_params[['c']]
test_data$data
raw_data
df <- copy(raw_data)
df
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
df
raw_data
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
df<-test_data$data
bin_params <- mid_obj$preproc$bin_list
mid_obj <- test_imp
bin_params <- mid_obj$preproc$bin_list
bin_cols <- names(bin_params)
for (j in bin_cols) {
set(df, j = j, value = add_bin_labels(df[[j]], one = bin_params[[j]][1], zero = bin_params[[j]][2]))
}
df
raw_data
cat_params <- mid_obj$preproc$cat_lists
cat_params
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
library(tidyverse)
library(ggpubr)
library(stargazer)
library(miceadds)
#### READ DATA ####
COVID_clean <- readRDS("pretest.RDS")
COVID_clean <- COVID_clean %>% mutate(rid = row_number())
# Recode Education
COVID_clean <- COVID_clean %>%
mutate(educ_gps = if_else(educ_gps == "Completed four years of education beyond", "Completed four years of education beyond",
if_else(educ_gps == "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed")))
# Recode Gender
COVID_clean <- COVID_clean %>%
mutate(Sex = if_else(gender == "Female", "Female",
if_else(gender == "Male", "Male", "Female")))
COVID_clean$population <- as.numeric(COVID_clean$population)
COVID_clean$gdp_2018 <- as.numeric(COVID_clean$gdp_2018)
COVID_clean$gdp_pc <- COVID_clean$gdp_2018/COVID_clean$population*1000
COVID_clean$gdp_stan_chile <- NA
COVID_clean$gdp_stan_china <- NA
COVID_clean$gdp_stan_italy <- NA
COVID_clean$gdp_pc_chile <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_chile [COVID_clean$country != "Chile"] <- NA
COVID_clean$gdp_pc_china <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_china [COVID_clean$country != "China"] <- NA
COVID_clean$gdp_pc_italy <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_italy [COVID_clean$country != "Italy"] <- NA
COVID_clean$gdp_stan_chile <- as.vector(scale(COVID_clean$gdp_pc_chile))
COVID_clean$gdp_stan_china <- as.vector(scale(COVID_clean$gdp_pc_china))
COVID_clean$gdp_stan_italy  <- as.vector(scale(COVID_clean$gdp_pc_italy))
COVID_clean$gdp_stan <- coalesce(COVID_clean$gdp_stan_chile, COVID_clean$gdp_stan_china, COVID_clean$gdp_stan_italy)
COVID_clean <-
mutate(COVID_clean,
infect_rate_chile = ifelse(country=="Chile",infection_rate, NA),
infect_rate_china = ifelse(country=="China",infection_rate, NA),
infect_rate_italy = ifelse(country=="Italy",infection_rate, NA)) %>%
mutate_at(all_of(c("infect_rate_chile", "infect_rate_china","infect_rate_italy")),
function(x) {ifelse(x > quantile(x,0.75,na.rm=TRUE),"High",
ifelse(x < quantile(x,0.25, na.rm = TRUE),"Low","Medium"))}) %>%
mutate(infection_cat = coalesce(infect_rate_chile, infect_rate_china, infect_rate_italy)) %>%
mutate(infection_cat = factor(infection_cat, levels = c("Low","Medium","High")))
COVID_clean$infect_rate_chile <- NULL
COVID_clean$infect_rate_china <- NULL
COVID_clean$infect_rate_italy <- NULL
setwd("~/Dropbox/Tom COVID-19/COVID survey")
library(tidyverse)
library(ggpubr)
library(stargazer)
library(miceadds)
#### READ DATA ####
COVID_clean <- readRDS("pretest.RDS")
COVID_clean <- COVID_clean %>% mutate(rid = row_number())
# Recode Education
COVID_clean <- COVID_clean %>%
mutate(educ_gps = if_else(educ_gps == "Completed four years of education beyond", "Completed four years of education beyond",
if_else(educ_gps == "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed", "Secondary - 3 year Tertiary Secondary ed")))
# Recode Gender
COVID_clean <- COVID_clean %>%
mutate(Sex = if_else(gender == "Female", "Female",
if_else(gender == "Male", "Male", "Female")))
COVID_clean$population <- as.numeric(COVID_clean$population)
COVID_clean$gdp_2018 <- as.numeric(COVID_clean$gdp_2018)
COVID_clean$gdp_pc <- COVID_clean$gdp_2018/COVID_clean$population*1000
COVID_clean$gdp_stan_chile <- NA
COVID_clean$gdp_stan_china <- NA
COVID_clean$gdp_stan_italy <- NA
COVID_clean$gdp_pc_chile <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_chile [COVID_clean$country != "Chile"] <- NA
COVID_clean$gdp_pc_china <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_china [COVID_clean$country != "China"] <- NA
COVID_clean$gdp_pc_italy <- COVID_clean$gdp_pc
COVID_clean$gdp_pc_italy [COVID_clean$country != "Italy"] <- NA
COVID_clean$gdp_stan_chile <- as.vector(scale(COVID_clean$gdp_pc_chile))
COVID_clean$gdp_stan_china <- as.vector(scale(COVID_clean$gdp_pc_china))
COVID_clean$gdp_stan_italy  <- as.vector(scale(COVID_clean$gdp_pc_italy))
COVID_clean$gdp_stan <- coalesce(COVID_clean$gdp_stan_chile, COVID_clean$gdp_stan_china, COVID_clean$gdp_stan_italy)
COVID_clean <-
mutate(COVID_clean,
infect_rate_chile = ifelse(country=="Chile",infection_rate, NA),
infect_rate_china = ifelse(country=="China",infection_rate, NA),
infect_rate_italy = ifelse(country=="Italy",infection_rate, NA)) %>%
mutate_at(all_of(c("infect_rate_chile", "infect_rate_china","infect_rate_italy")),
function(x) {ifelse(x > quantile(x,0.75,na.rm=TRUE),"High",
ifelse(x < quantile(x,0.25, na.rm = TRUE),"Low","Medium"))}) %>%
mutate(infection_cat = coalesce(infect_rate_chile, infect_rate_china, infect_rate_italy)) %>%
mutate(infection_cat = factor(infection_cat, levels = c("Low","Medium","High")))
COVID_clean$infect_rate_chile <- NULL
COVID_clean$infect_rate_china <- NULL
COVID_clean$infect_rate_italy <- NULL
summary(COVID_clean$infection_rate[COVID_clean$country == "Chile"])
library(devtools)
library(roxygen2)
document()
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
# Use Rubin's rules to combine m regression models
combine(formula = d~a+c+e+f,
complete_datasets)
mice::pool(complete_datasets)
?mice::pool
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]])
}
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice::pool(comp_mod)
# Use Rubin's rules to combine m regression models
combine(formula = d~a+c+e+f,
complete_datasets)
summary(mice::pool(comp_mod))
mice_pool <- summary(mice::pool(comp_mod))[,c("estimate","std.error","statistic","p.value")]
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- summary(mice::pool(comp_mod))[,c("estimate","std.error","statistic","p.value")]
## Test:
identical(mice_pool, midas_pool)
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("estimate","std.error","statistic","p.value")])
mice_pool
midas_pool
mice_pool[1,4]
mice_pool[1,2]
midas_pool[1,2]
## Test:
similar(mice_pool, midas_pool)
## Test:
a..equal(mice_pool, midas_pool)
## Test:
all.equal(mice_pool, midas_pool)
## Test:
all.equal(mice_pool, midas_pool)
class(midas_pool)
mice_pool(midas_pool)
class(mice_pool)
## Test:
identical(mice_pool, midas_pool)
midas_pool$estimate
mice_pool$estimate
mice_pool$estimate == midas_pool$estimate
round(mice_pool$estimate == midas_pool$estimate,7)
round(mice_pool$estimate,7)
round(mice_pool$estimate,7) == round(midas_pool$estimate,7)
round(data.frame(a = c(1.274235, 234.23429384789234),
b = c(2.656562323566, 6.6546598794654)),3)
## Test:
mice_comp <- round(mice_pool,7)
midas_comp <- round(midas_pool, 7)
identical(mice_comp, midas_comp)
all.equal(mice_comp, midas_comp)
mice_pool
midas_pool
summary(mice::pool(comp_mod))
document()
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
midas_pool
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("estimate","std.error","statistic","p.value")])
mice_pool
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
## Test:
mice_comp <- round(mice_pool, 7)
midas_comp <- round(midas_pool, 7)
midas_pool
mice_pool
mice_pool$p.value
typeof(mice_pool$p.value)
typeof(midas_pool$p.value)
typeof(mice_pool$p.value)
?as.double
document()
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
midas_pool
mice_pool
as.single(midas_pool$p.value)
document
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod))[,c("term","estimate","std.error","statistic","p.value")])
midas_comp <- round(midas_pool, 7)
mice_pool <- as.data.frame(summary(mice::pool(comp_mod)))
midas_comp <- round(midas_pool[,-"term"], 7)
midas_comp <- round(midas_pool[,-c("term")], 7)
document()
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod)))
midas_pool
mice_pool
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 7)
mice_test <- round(mice_test, 7)
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 7)
mice_test <- round(mice_test, 7)
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 7)
mice_test <- round(mice_test, 7)
identical(mid_test, mice_test)
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 11)
mice_test <- round(mice_test, 11)
identical(mid_test, mice_test)
mid_test
mice_test
identical(mid_test, mice_test)
# Generate raw data, with numeric, binary, and categorical variables
raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
mice_pool <- as.data.frame(summary(mice::pool(comp_mod)))
## Test
mid_test <- midas_pool[,c("estimate","std.error","statistic","df","p.value")]
mice_test <- mice_pool[,c("estimate","std.error","statistic","df","p.value")]
mid_test <- round(mid_test, 11)
mice_test <- round(mice_test, 11)
identical(mid_test, mice_test)
usethis::use_testhat()
usethis::use_testthat()
usethis::use_test()
setwd("~/Dropbox/rMIDAS")
usethis::use_test()
library(usethis)
comp_mod <- list()
for (m in 1:5) {
comp_mod[[m]] <- glm("d~a + c + e + f", complete_datasets[[m]], family = "gaussian")
}
test()
test()
test()
setwd("~/Dropbox/rMIDAS")
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = b*rnorm(1000)))
data.frame(a = rnorm(1000),
b = runif(1000),
c = b*rnorm(1000))
test_dfs <- lapply(1:5, function (x) data.frame("a" = rnorm(1000),
"b" = runif(1000),
"c" = b*rnorm(1000)))
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
test_dfs[[1]]
midas <- combine("a ~ b + c", df_list = test_dfs)
?mice::pool
midas_res <- combine("a ~ b + c", df_list = test_dfs)
mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
expect_equal(mid_test, mice_test)
expect_equal
test()
devtools::check()
library(mice)
devtools::check()
set.seed(89)
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
mice_res
summary(mice)
summary(mice_res)
set.seed(89)
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
midas_res <- combine("a ~ b + c", df_list = test_dfs)
# mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
summary(mice_res)
test()
test()
test()
summary(mice_res)
set.seed(89)
test_dfs <- lapply(1:5, function (x) data.frame(a = rnorm(1000),
b = runif(1000),
c = 2*rnorm(1000)))
midas_res <- combine("a ~ b + c", df_list = test_dfs)
mice_res <- mice::pool(lapply(test_dfs, function(x) glm("a~b+c", data = x)))
summary(mice_res)
midas_res$df[1]
round(midas_res$df[1],9)
expect_equal(round(midas_res$df[1],9), 23.59657)
round(midas_res$df[1],9)
round(midas_res$df[1],9) == 23.59657
round(midas_res$df[1],3) == 23.597
test
test()
check()
check()
document()
?train
check()
check()
document
document()
?convert
test_data <- raw_data = data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE))
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE))
converted_data <-convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equals(ncol(converted_data), 5)
expect_equal(ncol(converted_data), 5)
ncol(converted_data)
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equal(length(converted_data), 5)
expect_equal(ncol(converted_data$data), 5)
expect_equal("a_red" %in% colnames(converted_data$data), TRUE)
expect_equal(sum(converted_data$data[["b"]] > 1), 0)
range(converted_data$data[["b"]])
seq(0.265,1000)
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = seq(0.265,1000),
c = sample(c("YES","NO",NA),1000,replace=TRUE))
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equal(length(converted_data), 5)
expect_equal(ncol(converted_data$data), 5)
expect_equal("a_red" %in% colnames(converted_data$data), TRUE)
expect_equal(range(converted_data$data[["b"]]), c(0,1))
range(converted_data$data[["b"]])
test()
expect_equal(typeof(converted_data$data[["c"]]), "as.numeric")
expect_equal(typeof(converted_data$data[["c"]]), "as.integer")
expect_equal(typeof(converted_data$data[["c"]]), "integer")
check()
check()
check()
use_apl2_license()
use_apl2_license("Apache License (=2.0)")
check()
use_apl2_license("Apache License (=2.0)")
check()
check()
?pt
packageName::
packageName::sadf
check()
document()
check()
check()
check()
check()
check()
reticulate::use_condaenv()
reticulate::use_condaenv()?
?reticulate::use_condaenv
check()
check()
check()
check()
check()
system.file
?system.file
base::system.file
check()
check()
check()
tempdir()
document()
check()
