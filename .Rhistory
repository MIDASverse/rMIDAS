cat_cols <- mid_obj$preproc$cat_names
for (i in 1:length(cat_cols)) {
set(df,
j = cat_cols[[i]],
value = coalesce_one_hot(X = df[,cat_params[[i]], with = FALSE],
var_name = cat_cols[i]))
}
# Remove one-hot columns
df[,do.call("c",cat_params)] <- NULL
}
fast
fast = FALSE
DF
df
draws <- mid_obj$generate_samples(m = as.integer(m))$output_list
df = draws[[1]]
df <- as.data.table(df)
fast
if (cat_coalesce) {
cat_params <- mid_obj$preproc$cat_lists
cat_cols <- mid_obj$preproc$cat_names
for (i in 1:length(cat_cols)) {
set(df,
j = cat_cols[[i]],
value = coalesce_one_hot(X = df[,cat_params[[i]], with = FALSE],
var_name = cat_cols[i],
fast))
}
# Remove one-hot columns
df[,do.call("c",cat_params)] <- NULL
}
load_all
load_all()
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
complete_datasets[[1]]
complete_datasets[[2]]
complete_datasets[[3]]
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
View(complete_datasets[[1]])
mid_obj <- test_imp
draws <- mid_obj$generate_samples(m = as.integer(m))$output_list
m = 5
draws <- mid_obj$generate_samples(m = as.integer(m))$output_list
df = draws[[1]]
df <- as.data.table(df)
cat_params <- mid_obj$preproc$cat_lists
cat_cols <- mid_obj$preproc$cat_names
cat_params
i = 1
j = cat_cols[[i]]
j
X = df[,cat_params[[i]], with = FALSE]
var_name = cat_cols[i]
fast
fast = FALSE
X_copy <- data.table::copy(X)
X_names <- names(X_copy)
fast
apply(X_copy, 1, function (r) sample(X_names, 1, prob = r))
if (fast) {
X_max <- apply(X_copy, 1, which.max)
} else {
X_max <- apply(X_copy, 1, function (r) sample(X_names, 1, prob = r))
}
sub(paste0(var_name,"_"),"",names(X_copy))[X_max]
sub(paste0(var_name,"_"),"",x_names)
sub(paste0(var_name,"_"),"",X_names)
sub(paste0(var_name,"_"),"",X_names)
apply(X_copy, 1, which.max)
apply(X_copy, 1, function (r) sample(X_names, 1, prob = r))
X_max <- apply(X_copy, 1, function (r) sample(X_names, 1, prob = r))
sub(paste0(var_name,"_"),"",X_max)
X_max <- apply(X_copy, 1, function (r) sample(X_names, 1, prob = r))
X_max_cat <- sub(paste0(var_name,"_"),"",X_max)
X_max
X_max_cat
fast
set.seed(89)
if (fast) {
X_max <- apply(X_copy, 1, which.max)
X_max_cat <- sub(paste0(var_name,"_"),"",X_names)[X_max]
} else {
X_max <- apply(X_copy, 1, function (r) sample(X_names, 1, prob = r))
X_max_cat <- sub(paste0(var_name,"_"),"",X_max)
}
test1 <- X_max_cat
fast
fast = TRUE
set.seed(89)
if (fast) {
X_max <- apply(X_copy, 1, which.max)
X_max_cat <- sub(paste0(var_name,"_"),"",X_names)[X_max]
} else {
X_max <- apply(X_copy, 1, function (r) sample(X_names, 1, prob = r))
X_max_cat <- sub(paste0(var_name,"_"),"",X_max)
}
test2 <- X_max_cat
test1 == test2
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
load_all()
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
complete_datasets[[1]]
summary(complete_datasets[[1]])
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
View(complete_datasets[[1]])
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
midas_pool
load_all()
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rMIDAS")
library(rMIDAS)
adult <- read.csv("https://raw.githubusercontent.com/MIDASverse/MIDASpy/master/Examples/adult_data.csv",
row.names = 1)
adult <- adult[1:1000,]
set.seed(89)
for (column in names(adult)) {
r <- sample(c(FALSE,TRUE), length(adult[[column]]), replace = TRUE, prob = c(0.9,0.1))
adult[[column]] <- ifelse(r, NA, adult[[column]])
}
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
adult_conv <- convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(256,256,256),
input_drop = 0.75,
seed = 89)
adult_complete <- complete(adult_train, m = 10)
adult_complete[[1]]
View(adult_complete[[1]])
summary(adult_complete[[1]]$workclass)
as.factor(summary(adult_complete[[1]]$workclass))
adult_conv$cat_lists
# Inspect first imputed dataset:
head(adult_complete[[1]])
adult_lm <- combine("class_labels ~ hours_per_week + education + sex",
adult_complete)
glm("class_labels ~ hours_per_week + education + sex", adult_complete[[1]])
glm("class_labels ~ hours_per_week + education + sex", adult_complete[[1]], family = stats::gaussian)
glm(class_labels ~ hours_per_week + education + sex, adult_complete[[1]], family = stats::gaussian)
adult_complete$class_labels
adult_complete[[1]]$class_labels
lm(adult_complete[[1]]$class_labels ~ adult_complete[[1]]$sex
)
View(adult_complete[[1]])
calss(adult_complete[[1]]$class_labels)
class(adult_complete[[1]]$class_labels)
levels(adult_complete[[1]]$class_labels)
adult_model <- combine("class_labels ~ hours_per_week + education + sex",
adult_complete,
family = binomial())
adult_model
adult_model <- combine("class_labels ~ hours_per_week + sex",
adult_complete,
family = binomial())
adult_model
adult_model <- combine("class_labels ~ hours_per_week + sex",
adult_complete,
family = binomial())
adult_model
adult_model <- combine("class_labels ~ hours_per_week + sex",
adult_complete,
family = binomial())
adult_model
adult_model <- combine("class_labels ~ hours_per_week + sex",
adult_complete,
family = stats::binomial)
adult_model
devtools::load(rMIDAS)
devtools::load_all()
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
adult_conv <- convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
adult_conv <- rMIDAS::convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
load_all()
set.seed(89)
for (column in names(adult)) {
r <- sample(c(FALSE,TRUE), length(adult[[column]]), replace = TRUE, prob = c(0.9,0.1))
adult[[column]] <- ifelse(r, NA, adult[[column]])
}
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
adult_conv <- rMIDAS::convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(256,256,256),
input_drop = 0.75,
seed = 89)
adult <- read.csv("https://raw.githubusercontent.com/MIDASverse/MIDASpy/master/Examples/adult_data.csv",
row.names = 1)
# adult <- adult[1:1000,]
set.seed(89)
for (column in names(adult)) {
r <- sample(c(FALSE,TRUE), length(adult[[column]]), replace = TRUE, prob = c(0.9,0.1))
adult[[column]] <- ifelse(r, NA, adult[[column]])
}
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
adult_conv <- rMIDAS::convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(256,256,256),
input_drop = 0.75,
seed = 89)
adult_complete <- complete(adult_train, m = 10)
FALSE & FALSE
FALSE & FALSE & FALSE
FALSE & FALSE & TRUE
FALSE || FALSE || FALSE
FALSE || FALSE || TRUE
FALSE || FALSE || FALSE
FALSE || TRUE || FALSE
load_all()
View(adult_complete[[1]])
load_all()
adult_complete <- complete(adult_train, m = 10)
load_all()
adult_complete <- complete(adult_train, m = 10)
adult_complete <- complete(adult_train, m = 10, fast = TRUE)
adult <- read.csv("https://raw.githubusercontent.com/MIDASverse/MIDASpy/master/Examples/adult_data.csv",
row.names = 1)[1:5000,]
set.seed(89)
for (column in names(adult)) {
r <- sample(c(FALSE,TRUE), length(adult[[column]]), replace = TRUE, prob = c(0.9,0.1))
adult[[column]] <- ifelse(r, NA, adult[[column]])
}
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
adult_conv <- rMIDAS::convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(128,128),
input_drop = 0.75,
seed = 89)
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(128,128),
input_drop = 0.75,
seed = 89)
adult <- read.csv("https://raw.githubusercontent.com/MIDASverse/MIDASpy/master/Examples/adult_data.csv",
row.names = 1)[1:1000,]
set.seed(89)
for (column in names(adult)) {
r <- sample(c(FALSE,TRUE), length(adult[[column]]), replace = TRUE, prob = c(0.9,0.1))
adult[[column]] <- ifelse(r, NA, adult[[column]])
}
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
adult_conv <- rMIDAS::convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(128,128),
input_drop = 0.75,
seed = 89)
adult_complete <- complete(adult_train, m = 10)
# Inspect first imputed dataset:
head(adult_complete[[1]])
adult_model <- combine("class_labels ~ hours_per_week + sex",
adult_complete,
family = stats::binomial)
adult_model
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
message("Hello")
for (i in 1:10) {a = i; message("hello"); print(a^2)}
skip_if_no_numpy()
LOCAL <- identical(Sys.getenv("LOCAL"), "true")
LOCAL
build_vignettes()
build_vignettes()
Sys.setenv(LOCAL = "true")
LOCAL <- identical(Sys.getenv("LOCAL"), "true")
build_vignettes()
library(dplyr)
build_vignette()
library(devtools)
load_all()
build_vignettes()
load_all()
adult <- add_missingness(adult, prop = 0.1)
build_vignettes()
setwd("~/Dropbox/rMIDAS")
library(devtools)
load_all()
build_vignettes()
Sys.setenv(LOCAL = "true")
build_vignettes()
whole_data <- data.frame(a = rnorm(1000),
b = rnorm(1000))
missing_data <- add_missingness(whole_data, 0.1)
#' @param X A data.frame or similar
#' @param prop Numeric between 0 and 1; the proportion of observations set to missing
#' @param cols A vector of column names to be corrupted; if NULL, all columns are used
#' @export
#' @return Data with missing values
#' @examples
#' whole_data <- data.frame(a = rnorm(1000),
#'                         b = rnorm(1000))
#'
#' missing_data <- add_missingness(whole_data, 0.1)
add_missingness <- function(X, prop, cols = NULL) {
if (is.null(X)) {
cols <- names(X)
}
for (column in cols) {
# Generate an indicator variable with 10% probability of assigning missingness
r <- sample(c(FALSE,TRUE),
length(X[[column]]),
replace = TRUE, prob = c(1-prop,prop))
# Corrupt data based on missingness indicator
X[[column]] <- ifelse(r, NA, X[[column]])
}
return(X)
}
missing_data <- add_missingness(whole_data, 0.1)
View(missing_data)
X <- whole_data
if (is.null(X)) {
cols <- names(X)
}
if (is.null(cols)) {
cols <- names(X)
}
#' @param X A data.frame or similar
#' @param prop Numeric between 0 and 1; the proportion of observations set to missing
#' @param cols A vector of column names to be corrupted; if NULL, all columns are used
#' @export
#' @return Data with missing values
#' @examples
#' whole_data <- data.frame(a = rnorm(1000),
#'                         b = rnorm(1000))
#'
#' missing_data <- add_missingness(whole_data, 0.1)
add_missingness <- function(X, prop, cols = NULL) {
if (is.null(cols)) {
cols <- names(X)
}
for (column in cols) {
# Generate an indicator variable with 10% probability of assigning missingness
r <- sample(c(FALSE,TRUE),
length(X[[column]]),
replace = TRUE, prob = c(1-prop,prop))
# Corrupt data based on missingness indicator
X[[column]] <- ifelse(r, NA, X[[column]])
}
return(X)
}
add_missingness(whole_data, 0.1)
load_all()
load_all()
build_vignettes()
load_all()
library(devtools)
set_python_env(path = "/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
load_all()
set_python_env(path = "/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
set_python_env(path = "~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
knitr::opts_chunk$set(echo = TRUE)
LOCAL <- identical(Sys.getenv("LOCAL"), "true")
library(rMIDAS)
adult <- read.csv("https://raw.githubusercontent.com/MIDASverse/MIDASpy/master/Examples/adult_data.csv",
row.names = 1)[1:1000,]
set.seed(89)
adult <- add_missingness(adult, prop = 0.1)
View(adult)
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
# Apply rMIDAS preprocessing steps
adult_conv <- convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
# Train the model for 2 epochs
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(128,128),
input_drop = 0.75,
seed = 89)
# Generate 10 imputed datasets
adult_complete <- complete(adult_train, m = 10)
# Inspect first imputed dataset:
head(adult_complete[[1]])
# Estimate logit model using Rubin's Rules on 10 imputed datasets
adult_model <- combine("class_labels ~ hours_per_week + sex",
adult_complete,
family = stats::binomial)
adult_model
reticulate::py_run_string("import tensorflow as tf; tf.__version__")
test <- reticulate::py_run_string("import tensorflow as tf; tf.__version__")
View(test)
Sys.setenv(LOCAL = "true")
build_vignettes()
?add_missingness
??add_missingness
add_missingness()
document()
build_vignettes()
check()
check()
check()
check_rhub()
check_rhub(email = "ts.robinson1994@gmail.com")
rhub::check()
devtools::check_rhub
devtools::check_rhub()
rhub::validate_email("ts.robinson1994@gmail.com")
check_rhub()
version
check_win_release()
check_win_devel()
check_win_release()
check()
c(NA || FALSE, NA || TRUE)
NA*0
NA^0
document()
check()
check_rhub()
devtools::revdep_check()
revdep()
?rMIDAS::complete
document()
check()
check_rhub()
