#' Checks if each Python dependency is available.
#' This function is called within some examples to ensure code executes properly.
#' @keywords setup
#' @return `NULL`
are_packages_available <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","os","random", "tensorflow_addons")
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
if (sum(dep_avail) != length(py_dep)) {
return(FALSE)
} else {
return(TRUE)
}
}
#' Check whether all Python packages are available
#'
#' Checks if each Python dependency is available.
#' This function is called within some examples to ensure code executes properly.
#' @keywords setup
#' @return `NULL`
is_python_configured <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","os","random", "tensorflow_addons")
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
if (sum(dep_avail) != length(py_dep)) {
return(FALSE)
} else {
return(TRUE)
}
}
is_python_configured()
#' Check whether all Python packages are available
#'
#' Checks if each Python dependency is available.
#' This function is called within some examples to ensure code executes properly.
#' @keywords setup
#' @return `NULL`
is_python_configured <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","os","random", "tensorflow_addons")
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
if (sum(dep_avail) == length(py_dep)) {
return(TRUE)
} else {
return(FALSE)
}
}
is_python_configured()
#' Check whether Python is capable of executing example code
#'
#' Checks if each Python dependency is available.
#' This function is called within some examples to ensure code executes properly.
#' @keywords setup
#' @return `NULL`
python_configured <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","os","random", "tensorflow_addons")
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
if (sum(dep_avail) == length(py_dep)) {
return(TRUE)
} else {
return(FALSE)
}
}
python_configured
python_configured()
if (python_configured()) {
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
}
check()
library(devtools)
?check
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
dep_avail
check(cran = TRUE)
?check_rhub()
library(devtools)
load_all()
?set_python_env
set_python_env("no_tf", type = "conda")
reticulate::py_config()
?reticulate::py_available
reticulate::py_available()
reticulate::py_available()
!reticulate::py_available()
reticulate::py_available()
reticulate::py_available()
reticulate::py_available()
reticulate::py_available()
reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
!reticulate::py_available()
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","os","random", "tensorflow_addons")
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
sum(dep_avail) == length(py_dep)
reticulate::py_available()
#' Check whether Python is capable of executing example code
#'
#' Checks if each Python dependency is available.
#' This function is called within some examples to ensure code executes properly.
#' @keywords setup
#' @return `NULL`
python_configured <- function() {
if (!reticulate::py_available()) {
return(FALSE)
} else {
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","os","random", "tensorflow_addons")
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
if (sum(dep_avail) == length(py_dep)) {
return(TRUE)
} else {
return(FALSE)
}
}
}
python_configured()
#' Check whether Python is capable of executing example code
#'
#' Checks if each Python dependency is available.
#' This function is called within some examples to ensure code executes properly.
#' @keywords setup
#' @return `NULL`
python_configured <- function() {
if (!reticulate::py_available()) {
return(FALSE)
} else {
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","os","random", "tensorflow_addons")
dep_avail <- sapply(py_dep, function (x) reticulate::py_module_available(x))
if (sum(dep_avail) == length(py_dep)) {
return(TRUE)
} else {
return(FALSE)
}
}
}
python_configured()
python_configured()
if (python_configured()) {
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
}
if (python_configured()) {
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
if (python_configured()) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
check()
library(devtools)
check()
check_rhub()
check_win_devel()
check_win_release()
check()
library(devtools)
load_all()
if (python_configured()) {
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
}
set_python_env("no_tf", type = "conda")
if (python_configured()) {
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5, fast = FALSE)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
}
python_configured()
check()
release()
release()
library(rfsrc)
library(randomForestSRC)
install.packages("randomForestSRC")
library(randomForestSRC)
rfsrc.new()
rfsrc.news()
data(veteran, package = "randomForestSRC")
v.obj <- rfsrc(Surv(time,status)~., veteran, ntree = 100)
plot.variable(v.obj, plots.per.page = 3)
plot.variable(v.obj, plots.per.page = 2, xvar.names = c("trt", "karno", "age"))
plot.variable(v.obj, surv.type = "surv", nvar = 1, time = 200)
plot.variable(v.obj, surv.type = "surv", partial = TRUE, smooth.lines = TRUE)
plot.variable(v.obj, surv.type = "surv", partial = TRUE, smooth.lines = TRUE)
library(jmv)
library(tidyverse)
library(haven)
setwd("~/Dropbox/durham/rpir_21/rpir_labs")
vdem <- read_csv("data/rpir_vdem.csv")
View(vdem)
vdem_2000 <- filter(vdem, year == 2000)
View(vdem_2000)
descriptives(vdem_2000, "v2x_partipdem")
vdem_2000[vdem_2000$country_name == "Norway",]
descriptives(vdem_2000, "v2x_partipdem")
vdem_2000[vdem_2000$country_name == "Norway",]
vdem_1980 <- filter(vdem, year == 1980)
descriptives(vdem_1980, "v2x_partipdem")
View(vdem_1980)
ttestIS(vdem, v2x_delibdem = TRUE)
View(vdem)
ttestIS(vdem, v2x_delibdem, group = e_civil_war,
welchs = TRUE, students = FALSE)
vdem$v2x_delibdem
vdem$e_civil_war == 0
vdem$v2x_delibdem[vdem$e_civil_war == 0]
vdem$v2x_delibdem[vdem$e_civil_war == 1]
t.test(vdem$v2x_delibdem[vdem$e_civil_war == 0],
vdem$v2x_delibdem[vdem$e_civil_war == 1])
0.2775303 - 0.1511950
vdem_2000[vdem_2000$country_name == "Norway",]
vdem_comp <- vdem_1980 %>%
mutate(overall_dem = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
View(vdem_comp)
vdem_1980 <- vdem_1980 %>%
mutate(dem_comp = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
t.test(vdem_1980$dem_comp[vdem_1980$e_civil_war == 0],
vdem_1980$dem_comp[vdem_1980$e_civil_war == 1])
0.000001089 < 0.05
ttestIS(vdem_1980, dem_comp, group = e_civil_war,
welchs = TRUE, students = FALSE)
0.0000011 < 0.05
t.test(vdem$v2x_delibdem[vdem$e_civil_war == 0],
vdem$v2x_delibdem[vdem$e_civil_war == 1])
0.2775303 - 0.1511950
t.test(vdem_1980$dem_comp[vdem_1980$e_civil_war == 0],
vdem_1980$dem_comp[vdem_1980$e_civil_war == 1])
1.3773386 - 0.4898333
# Democracy composite:
1.3773386 - 0.4898333
# Deliberative diff:
0.1263353
(1.3773386 - 0.4898333)/5
t.test(vdem_1980$dem_comp[vdem_1980$e_miinterc == 0],
vdem_1980$dem_comp[vdem_1980$e_miinterc == 1])
0.1273 < 0.05
t.test(vdem_1980$dem_comp[vdem_1980$e_miinterc == 0],
vdem_1980$dem_comp[vdem_1980$e_miinterc == 1])
setwd("~/Dropbox/durham/rpir_21/rpir_labs")
library(jmv)
library(tidyverse)
library(haven)
read_csv("data/rpir_vdem.csv")
vdem <- read_csv("data/rpir_vdem.csv")
View(vdem)
vdem_2000 <- filter(vdem, year %in% c(2000))
vdem_2000 <- filter(vdem, year %in% 2000)
vdem_2000 <- filter(vdem, year == 2000)
vdem_2000 <- filter(vdem, year %in% c(2000))
vdem_2000 <- filter(vdem, year == 2000)
View(vdem_2000)
descriptives(vdem_2000, c(v2x_libdem, e_civil_war))
descriptives(vdem_2000, c(v2x_partipdem, e_civil_war))
vdem_2000$v2x_partipdem[vdem_2000$country_name == "Norway"]
vdem_2000$v2x_partipdem[vdem_2000$country_name == "Belgium"]
vdem_2000$v2x_partipdem[vdem_2000$country_name == "United States"]
vdem_2000$v2x_partipdem[vdem_2000$country_name == "United States of America"]
vdem_1980 <- filter(vdem, year == 1980)
descriptives(vdem_1980, c(v2x_partipdem, e_civil_war))
0.3171761
vdem_1980$e_civil_war == 1
vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 1]
vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 0]
t.test(vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 1],
vdem_1980$v2x_delibdem[vdem_1980$e_civil_war == 0])
t.test(vdem$v2x_delibdem[vdem$e_civil_war == 1],
vdem$v2x_delibdem[vdem$e_civil_war == 0])
0.2775303 - 0.1511950
mutate(dem_comp = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
vdem_1980 <- vdem_1980 %>%
mutate(dem_comp = v2x_polyarchy + v2x_libdem + v2x_partipdem + v2x_delibdem + v2x_egaldem)
View(vdem_1980)
t.test(vdem_1980$dem_comp[vdem_1980$e_civil_war==1],
vdem_1980$dem_comp[vdem_1980$e_civil_war==0])
0.000001089 < 0.05
1.089e-06 < 0.05
1.3773386 - 0.4898333
0.1263353
0.1263353/1
0.8875053/5
t.test(vdem_1980$dem_comp[vdem_1980$e_miinterc==1],
vdem_1980$dem_comp[vdem_1980$e_miinterc==0])
library(devtools)
check_rhub()
check_win_devel()
check_win_release()
check()
git add .
release()
