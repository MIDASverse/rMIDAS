load_all()
library(devtools)
set_python_env(path = "/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
load_all()
set_python_env(path = "/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
set_python_env(path = "~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
knitr::opts_chunk$set(echo = TRUE)
LOCAL <- identical(Sys.getenv("LOCAL"), "true")
library(rMIDAS)
adult <- read.csv("https://raw.githubusercontent.com/MIDASverse/MIDASpy/master/Examples/adult_data.csv",
row.names = 1)[1:1000,]
set.seed(89)
adult <- add_missingness(adult, prop = 0.1)
View(adult)
adult_cat <- c('workclass','marital_status','relationship','race','education','occupation','native_country')
adult_bin <- c('sex','class_labels')
# Apply rMIDAS preprocessing steps
adult_conv <- convert(adult,
bin_cols = adult_bin,
cat_cols = adult_cat,
minmax_scale = TRUE)
# Train the model for 2 epochs
adult_train <- train(adult_conv,
training_epochs = 20,
layer_structure = c(128,128),
input_drop = 0.75,
seed = 89)
# Generate 10 imputed datasets
adult_complete <- complete(adult_train, m = 10)
# Inspect first imputed dataset:
head(adult_complete[[1]])
# Estimate logit model using Rubin's Rules on 10 imputed datasets
adult_model <- combine("class_labels ~ hours_per_week + sex",
adult_complete,
family = stats::binomial)
adult_model
reticulate::py_run_string("import tensorflow as tf; tf.__version__")
test <- reticulate::py_run_string("import tensorflow as tf; tf.__version__")
View(test)
Sys.setenv(LOCAL = "true")
build_vignettes()
?add_missingness
??add_missingness
add_missingness()
document()
build_vignettes()
check()
check()
check()
check_rhub()
check_rhub(email = "ts.robinson1994@gmail.com")
rhub::check()
devtools::check_rhub
devtools::check_rhub()
rhub::validate_email("ts.robinson1994@gmail.com")
check_rhub()
version
check_win_release()
check_win_devel()
check_win_release()
check()
c(NA || FALSE, NA || TRUE)
NA*0
NA^0
document()
check()
check_rhub()
devtools::revdep_check()
revdep()
?rMIDAS::complete
document()
check()
check_rhub()
library(devtools)
check_rhub()
?use_python
option("tom_test" = NULL)
options("tom_test" = NULL)
options("tom_test")
options("tom_test")
is.null(options("tom_test"))
options("tom_test")[[1]]
is.null(options("tom_test")[[1]])
options("tom_test")[[1]]
options("tom_test")[[1]] == TRUE
py_dep <- c("matplotlib","numpy","pandas","tensorflow","sklearn","random")
py_pkgs <- gsub("==1.15","",py_dep)
py_dep == py_pkgs
identical(py_dep, py_pkgs)
#' Configure python for MIDAS imputation
#'
#' This function checks if the required Python dependencies are installed, and if not, checks with user before installing them.
#' This function is called automatically within `set_python_env`, and should only need to be used when manually configuring python installs using reticulate.
#' @keywords setup
#' @return NULL
mid_py_setup <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow>=1.15","sklearn","random")
py_pkgs <- gsub(">=1.15","",py_dep)
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
missing_pkg <- sapply(py_pkg_load, function (x) ("try-error" %in% class(x)))
missing_pkg <- py_dep[missing_pkg]
if (length(missing_pkg) >= 1) {
message("\nThe following packages need to be installed: ", paste0(missing_pkg, sep = "  "))
ask <- 1
usr_response <- readline(prompt="Are you happy to proceed? [Y/N]: ")
while (!(tolower(usr_response) %in% c("y","n")) & ask <= 5) {
usr_response <- readline(prompt="Invalid input. Please enter either 'Y' or 'N': ")
ask <- ask + 1
}
if (tolower(usr_response) == "y") {
for (py_pkg in missing_pkg) {
message("\nInstalling missing python dependency: ",py_pkg)
reticulate::py_install(py_pkg)
}
} else {
stop("\nUnable to install packages")
}
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
inst_check <- sum(sapply(py_pkg_load, function (x) ("try-error" %in% class(x))))
if (inst_check != 0) {
stop("\nUnable to load required packages")
}
}
}
mid_py_setup()
py_dep <- c("matplotlib","numpy","pandas","tensorflow>=1.15","sklearn","random")
py_pkgs <- gsub(">=1.15","",py_dep)
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
py_pkg = pymidas
py_pkg = "pymidas"
message("\nInstalling missing python dependency: ",py_pkg)
pkg_install <- try(reticulate::py_install(py_pkg))
pkg_install
("try-error" in pkg_install)
("try-error" %in% pkg_install)
class(pkg_install)
("try-error" %in% class(pkg_install))
stop("\nUnable to install package ", py_pkg)
stop("Unable to install package ", py_pkg, "\n")
message("\nInstalling missing python dependency: ",py_pkg)
pkg_install <- try(reticulate::py_install(py_pkg))
pkg_install <- try(reticulate::py_install(py_pkg), silent = TRUE)
#' Configure python for MIDAS imputation
#'
#' This function checks if the required Python dependencies are installed, and if not, checks with user before installing them.
#' This function is called automatically within `set_python_env`, and should only need to be used when manually configuring python installs using reticulate.
#' @keywords setup
#' @return NULL
mid_py_setup <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow>=1.15","sklearn","random", "pymidas")
py_pkgs <- gsub(">=1.15","",py_dep)
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
missing_pkg <- sapply(py_pkg_load, function (x) ("try-error" %in% class(x)))
missing_pkg <- py_dep[missing_pkg]
if (length(missing_pkg) >= 1) {
message("\nThe following packages need to be installed: ", paste0(missing_pkg, sep = "  "))
ask <- 1
usr_response <- readline(prompt="Are you happy to proceed? [Y/N]: ")
while (!(tolower(usr_response) %in% c("y","n")) & ask <= 5) {
usr_response <- readline(prompt="Invalid input. Please enter either 'Y' or 'N': ")
ask <- ask + 1
}
if (tolower(usr_response) == "y") {
for (py_pkg in missing_pkg) {
message("\nInstalling missing python dependency: ",py_pkg)
pkg_install <- try(reticulate::py_install(py_pkg), silent = TRUE)
if ("try-error" %in% class(pkg_install)) {
stop("Unable to install package ", py_pkg, "\n")
}
}
} else {
stop("Unable to install packages.")
}
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
inst_check <- sum(sapply(py_pkg_load, function (x) ("try-error" %in% class(x))))
if (inst_check != 0) {
stop("\nUnable to load required packages")
}
}
}
mid_py_setup()
py_dep <- c("matplotlib","numpy","pandas","tensorflow>=1.15","sklearn","random", "pymidas")
py_pkgs <- gsub(">=1.15","",py_dep)
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
missing_pkg <- sapply(py_pkg_load, function (x) ("try-error" %in% class(x)))
missing_pkg <- py_dep[missing_pkg]
missing_pkg
py_pkg_load
py_dep <- c("matplotlib","numpy","pandas","tensorflow>=1.15","sklearn","random", "httr")
py_pkgs <- gsub(">=1.15","",py_dep)
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
missing_pkg <- sapply(py_pkg_load, function (x) ("try-error" %in% class(x)))
missing_pkg <- py_dep[missing_pkg]
if (length(missing_pkg) >= 1) {
message("\nThe following packages need to be installed: ", paste0(missing_pkg, sep = "  "))
ask <- 1
usr_response <- readline(prompt="Are you happy to proceed? [Y/N]: ")
while (!(tolower(usr_response) %in% c("y","n")) & ask <= 5) {
usr_response <- readline(prompt="Invalid input. Please enter either 'Y' or 'N': ")
ask <- ask + 1
}
if (tolower(usr_response) == "y") {
for (py_pkg in missing_pkg) {
message("\nInstalling missing python dependency: ",py_pkg)
pkg_install <- try(reticulate::py_install(py_pkg), silent = TRUE)
if ("try-error" %in% class(pkg_install)) {
stop("Unable to install package ", py_pkg, "\n")
}
}
} else {
stop("Unable to install packages.")
}
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
inst_check <- sum(sapply(py_pkg_load, function (x) ("try-error" %in% class(x))))
if (inst_check != 0) {
stop("\nUnable to load required packages")
}
}
#' Configure python for MIDAS imputation
#'
#' This function checks if the required Python dependencies are installed, and if not, checks with user before installing them.
#' This function is called automatically within `set_python_env`, and should only need to be used when manually configuring python installs using reticulate.
#' @keywords setup
#' @return NULL
mid_py_setup <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow>=1.15","sklearn","random", "httr")
py_pkgs <- gsub(">=1.15","",py_dep)
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
missing_pkg <- sapply(py_pkg_load, function (x) ("try-error" %in% class(x)))
missing_pkg <- py_dep[missing_pkg]
if (length(missing_pkg) >= 1) {
message("\nThe following packages need to be installed: ", paste0(missing_pkg, sep = "  "))
ask <- 1
usr_response <- readline(prompt="Are you happy to proceed? [Y/N]: ")
while (!(tolower(usr_response) %in% c("y","n")) & ask <= 5) {
usr_response <- readline(prompt="Invalid input. Please enter either 'Y' or 'N': ")
ask <- ask + 1
}
if (tolower(usr_response) == "y") {
for (py_pkg in missing_pkg) {
message("\nInstalling missing python dependency: ",py_pkg)
pkg_install <- try(reticulate::py_install(py_pkg), silent = TRUE)
if ("try-error" %in% class(pkg_install)) {
stop("Unable to install package ", py_pkg, "\n")
}
}
} else {
stop("Unable to install packages.")
}
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
inst_check <- sum(sapply(py_pkg_load, function (x) ("try-error" %in% class(x))))
if (inst_check != 0) {
stop("\nUnable to load required packages")
}
}
}
py_mid_setup()
mid_py_setup
mid_py_setup()
#' Configure python for MIDAS imputation
#'
#' This function checks if the required Python dependencies are installed, and if not, checks with user before installing them.
#' This function is called automatically within `set_python_env`, and should only need to be used when manually configuring python installs using reticulate.
#' @keywords setup
#' @return NULL
mid_py_setup <- function() {
py_dep <- c("matplotlib","numpy","pandas","tensorflow>=1.15","sklearn","os","random")
py_pkgs <- gsub(">=1.15","",py_dep)
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
missing_pkg <- sapply(py_pkg_load, function (x) ("try-error" %in% class(x)))
missing_pkg <- py_dep[missing_pkg]
if (length(missing_pkg) >= 1) {
message("\nThe following packages need to be installed: ", paste0(missing_pkg, sep = "  "))
ask <- 1
usr_response <- readline(prompt="Are you happy to proceed? [Y/N]: ")
while (!(tolower(usr_response) %in% c("y","n")) & ask <= 5) {
usr_response <- readline(prompt="Invalid input. Please enter either 'Y' or 'N': ")
ask <- ask + 1
}
if (tolower(usr_response) == "y") {
for (py_pkg in missing_pkg) {
message("\nInstalling missing python dependency: ",py_pkg)
pkg_install <- try(reticulate::py_install(py_pkg), silent = TRUE)
if ("try-error" %in% class(pkg_install)) {
stop("Unable to install package ", py_pkg, "\n")
}
}
} else {
stop("Unable to install packages.")
}
py_pkg_load <- sapply(py_pkgs, function (py_pkg) try(reticulate::import(py_pkg, delay_load = TRUE),
silent = TRUE))
inst_check <- sum(sapply(py_pkg_load, function (x) ("try-error" %in% class(x))))
if (inst_check != 0) {
stop("\nUnable to load required packages")
}
}
}
mid_py_setup()
options("midas_initialised" = TRUE)
options("midas_initialised")
options("python_custom" = NULL)
options("python_initialised" = NULL)
is.null(options("python_initialised")$python_initialised)
!is.null(options("python_initialised")$python_initialised)
is.null(options("python_custom")$python_custom)
options("python_initialised")$python_initialised
library(devtools)
load_all()
options("python_initialised")
?set_python_env
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
options("python_custom")
(reticulate::py_module_available("numpy")
)
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
library(devtools)
load_all()
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
!is.null(options("python_custom")$python_custom)
load_all()
library(devtools)
load_all()
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas_test", type = "condaenv")
document()
?mid_py_setup
document()
?set_python_env
document()
?set_python_env
?set_python_env
document()
?set_python_env
document()
?python_initialise
document()
?set_python_env
document()
?set_python_env
library(devtools)
load_all()
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas_test", type = "condaenv")
library(devtools)
load_all()
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
train_data <- train(test_data)
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas_test", type = "condaenv")
library(devtools)
load_all()
set_python_env("~/Users/tomrobinson/anaconda3/envs/midas2", type = "condaenv")
library(devtools)
load_all()
set_python_env("Users/tomrobinson/anaconda3/envs/midas3", type = "condaenv")
set.seed(89)
n_obs <- 10000
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),n_obs, replace = TRUE),
b = 1:n_obs,
c = sample(c("YES","NO",NA),n_obs,replace=TRUE),
d = runif(n_obs,1,10),
e = sample(c("YES","NO"), n_obs, replace = TRUE),
f = sample(c("male","female","trans","other",NA), n_obs, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
train_data <- train(test_data)
reticulate::py_config()
py_config()$python
library(devtools)
load_all()
set_python_env("Users/tomrobinson/anaconda3/envs/midas3", type = "condaenv", conda = "autho")
set_python_env("Users/tomrobinson/anaconda3/envs/midas3", type = "condaenv", conda = "auto")
py_config()
library(reticulate)
use_condaenv("midas3", required = TRUE)
use_condaenv("Users/tomrobinson/anaconda3/envs/midas3", required = TRUE)
use_condaenv("~/Users/tomrobinson/anaconda3/envs/midas3", required = TRUE)
use_condaenv("~/Users/tomrobinson/anaconda3/envs/midas3/", required = TRUE)
use_condaenv("~/Users/tomrobinson/anaconda3/envs/midas3/", required = TRUE, conda = "auto")
use_condaenv("midas3")
py_config()
use_condaenv("midas3", required = TRUE)
use_condaenv("midas3", required = TRUE)
use_condaenv()
py_config()
conda_list()
use_condaenv("/Users/tomrobinson/anaconda3/envs/midas3/bin/python", required = TRUE)
use_condaenv("midas3", required = TRUE)
install.packages("reticulate")
reticulate::use_condaenv("midas3", required = TRUE)
library(reticulate)
reticulate::use_condaenv("midas3", conda = "/Users/tomrobinson/anaconda3/envs/midas3/bin/python", required = TRUE)
reticulate::use_condaenv("midas3", conda = "/Users/tomrobinson/anaconda3/envs/midas3/bin", required = TRUE)
reticulate::use_condaenv("midas3", conda = "/Users/tomrobinson/anaconda3/envs/midas3", required = TRUE)
reticulate::use_condaenv(conda = "/Users/tomrobinson/anaconda3/envs/midas3", required = TRUE)
reticulate::use_condaenv(conda = "/Users/tomrobinson/anaconda3/envs/midas3")
py_config()
use_miniconda("midas3", required = TRUE)
use_condaenv("midas3", required = TRUE)
py_discover_config()
use_condaenv("midas3", "/Users/tomrobinson/anaconda3/bin/python")
use_condaenv("midas3", "/Users/tomrobinson/anaconda3/bin/python", required = TRUE)
use_condaenv("midas3", "~/Users/tomrobinson/anaconda3/bin/python", required = TRUE)
myenvs=conda_list()
myenvs
envname
myenvs$name[2]
envname=myenvs$name[2]
use_condaenv(envname, required = TRUE)
myenvs=conda_list()
envname=myenvs$name[1]
use_condaenv(envname, required = TRUE)
