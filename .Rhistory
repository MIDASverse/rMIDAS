install.packages("mltools")
install.packages("mltools")
document()
library(devtools, roxygen2)
document()
check()
check()
check()
skip_if_no_numpy()
skip_if_no_numpy()
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = seq(0.265,1000),
c = sample(c("YES","NO",NA),1000,replace=TRUE))
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
test_data <- data.frame(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = seq(0.265,1000),
c = sample(c("YES","NO",NA),1000,replace=TRUE),
stringsAsFactors = FALSE)
converted_data <- convert(test_data,
bin_cols = "c",
cat_cols = "a",
minmax_scale = TRUE)
expect_equal(length(converted_data), 5)
expect_equal(ncol(converted_data$data), 5)
expect_equal("a_red" %in% colnames(converted_data$data), TRUE)
check()
check()
check()
check()
library(devtools, roxygen2)
check()
check()
check()
check()
check_rhub()
reticulate::r_to_py(data.frame(NA))
na_conv <- na_to_nan(data.frame(NA))
na_conv
reticulate::r_to_py(na_conv)
na_conv <- na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
na_conv
check()
check()
check()
check_rhub()
build_win()
devtools::build_manual()
check_rhub()
library(devtools, roxygen2)
check_rhub()
check_win_devel()
check_win_release()
release()
spell_check()
release()
release()
release()
library(devtools, roxygen2)
document()
na_conv <- na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
na_conv
na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
na_to_nan(data.frame(a = c(1,NA,0,0,NA,NA)))
path = "python3"
exact = FALSE
set_py_attempt <- try(reticulate::use_python(python = path, required = exact),
silent = TRUE)
set_py_attempt
document()
set_python_env(path)
#' @param path Character string, path to python binary if `type == "auto"`, path to virtualenv if `type == "virtualenv"`, or the name of a Conda environment if `type=="condaenv`
#' @param exact Boolean. If `TRUE` then only load exact match from `path`, otherwise allow reticulate to scan for other versions.
#' @param ... Further argument passed to reticulate::use_condaenv() for `conda` executable if `type == "condaenv"`.
#' @keywords setup
#' @export
#' @return Boolean indicating whether setup passed without errors
#' @examples
#' \donttest{
#' set_python_env(path = "~/.path/to/python/binary", type = "auto", exact = FALSE)
#' }
set_python_env <- function(path, type = "auto", exact = FALSE,...) {
set_complete <- FALSE
if (type == "auto") {
set_py_attempt <- try(reticulate::use_python(python = path, required = exact),
silent = TRUE)
} else if (type == "virtualenv") {
set_py_attempt <- try(reticulate::use_virtualenv(virtualenv = path, required = exact),
silent = TRUE)
} else if (type == "condaenv") {
set_py_attempt <- try(reticulate::use_condaenv(condaenv = path, required = exact, ...),
silent = TRUE)
} else {
stop("Type of configuration not recognised; 'type' should be one of 'auto','virtualenv','condaenv'")
}
if ("try-error" %in% class(set_py_attempt)) {
stop("Setting user-specified python environment '",path, "' failed.\n Please check the specified path and try again.")
} else {
message("Proceeding to check/install Python package dependencies.")
mid_py_setup()
}
set_complete <- TRUE
return(set_complete)
}
devtools::check()
devtools::check(run_dont_test = FALSE)
?overimpute()
devtools::check(cran = TRUE)
devtools::check(cran = TRUE)
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Run imputations
test_imp <- train(test_data)
# Generate datasets
complete_datasets <- complete(test_imp, m = 5)
# Use Rubin's rules to combine m regression models
midas_pool <- combine(formula = d~a+c+e+f,
complete_datasets)
midas_pool
check_rhub()
check_rhub()
skip_if_no_numpy()
if (reticulate::py_module_available("numpy")) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
}
if (reticulate::py_module_available("numpy")) {
raw_data <- data.table(a = sample(c("red","yellow","blue",NA),1000, replace = TRUE),
b = 1:1000,
c = sample(c("YES","NO",NA),1000,replace=TRUE),
d = runif(1000,1,10),
e = sample(c("YES","NO"), 1000, replace = TRUE),
f = sample(c("male","female","trans","other",NA), 1000, replace = TRUE))
# Names of bin./cat. variables
test_bin <- c("c","e")
test_cat <- c("a","f")
# Pre-process data
test_data <- convert(raw_data,
bin_cols = test_bin,
cat_cols = test_cat,
minmax_scale = TRUE)
# Overimpute - without plots
test_imp <- overimpute(test_data,
spikein = 0.3,
plot_vars = FALSE,
skip_plot = TRUE,
training_epochs = 10,
report_ival = 5)
}
reticulate::py_module_available("numpy")
check()
check_rhub()
?getFunction
check()
check_rhub()
?set_python_env
document()
?set
?set_python_env
check_win_devel()
check_win_release()
check_rhub()
?checkCRAN
?check
check_win_devel()
check_win_release()
?train
test <- skip_if_no_numpy()
test <- skip_if_no_numpy()
test <- mid_py_setup()
document()
?mid_py_setup
document()
library(devtools, roxygen2)
check()
check()
check_rhub()
check_win_devel()
check_win_release()
submit_cran()
setwd("~/Dropbox/Placement on ballot and electoral performance")
## Check balance pre- and post- lottery
library(tidyverse)
library(haven)
library(lfe)
library(xtable)
library(boot)
set.seed(89)
# Party-campaign level data
all_data <- read_dta("Ballots/Data/Panel/006_panel_council_mayors.dta")
race <- "councils"
# Individual-level data
ind_level <- read_dta("Ballots/Data/Panel/007_panel_councils_individual_rr.dta") %>%
filter(year == 2015) %>%
mutate(muni_party = paste0(muni_code,"_",party_code),
total_pub_ind = total_pub_ind/census) %>%
mutate_at(vars(contains("_rank")), ~ ifelse(is.na(.),0,1)) %>%
mutate_at(vars(contains(c("ae1","ae0","ai1","ai0"))), ~ (./census))
# Aggregate pre- and post- lottery spending to party-campaign level
mp_spend <- ind_level %>%
group_by(muni_party) %>%
summarise_at(outcomes_ind, sum, na.rm = TRUE) %>%
rename_all(~ str_replace(., "_ind",""))
mp_level <- all_data %>%
filter(year == 2015,
data_type == race,
!is.na(total_income),
!is.na(total_spending),
!is.na(total_public)) %>%
mutate(muni_party = paste0(muni_code,"_",party_code)) %>%
left_join(mp_spend, by = "muni_party")
pre_post_format <- function(mod) {
coef <- mod$coefficients[1,1]
se <- mod$coefficients[1,2]
coef_sig <-  ifelse(coef/se > 2.576, "***",
ifelse(coef/se > 1.96, "**",
ifelse(coef/se > 1.64, "*","")))
coef_print <- paste0(round(coef,3),coef_sig)
se_print <- paste0("(",round(se,3),")")
n <- mod$N
res <- list(coef_print, se_print, "-","","-","",n)
}
did_format <- function(mod) {
mod_coef <- mod$coefficients[,1][grepl(":", rownames(mod$coefficients))]
mod_se <- mod$coefficients[,2][grepl(":", rownames(mod$coefficients))]
mod_sig <- ifelse(mod_coef/mod_se > 2.576, "***",
ifelse(mod_coef/mod_se > 1.96, "**",
ifelse(mod_coef/mod_se > 1.64, "*","")))
mod_n <- mod$N
mod_res <- list("-","") #Blank for non-mod coef + SE
for (i in 1:length(mod_coef)) {
mod_res[[length(mod_res) + 1]] <- paste0(round(mod_coef[i],3),mod_sig[i])
mod_res[[length(mod_res) + 1]] <- paste0("(",round(mod_se[i],3),")")
}
mod_res[[length(mod_res) + 1]] <- mod_n
return(mod_res)
}
make_table <- function(tab_list, path) {
do.call("cbind",tab_list) %>%
as.data.frame(.) %>%
add_column(.before = 1,
` ` = c("Effect of Row = 1","",
"Row = 1 x Pre-Lottery","",
"Row = 1 x Post-Lottery","",
"N")) %>%
xtable(.) %>%
print(.,
include.rownames = FALSE,
include.colnames = FALSE,
booktabs = TRUE,
hline.after = NULL,
only.contents = TRUE,
file = path)
}
outcomes_ind <- c("total_spend_ind_ae0","total_spend_ind_ae1")
mod_tab_ind <- list()
for (out in outcomes_ind) {
bal_formula <- as.formula(paste0(out, " ~ top_party | const_year + party_code | 0  | muni_party"))
mod_ind <- summary(felm(bal_formula, ind_level))
res_ind <- pre_post_format(mod_ind)
mod_tab_ind[[out]] <- res_ind
}
outcomes_mp <- c("total_spend_ae0","total_spend_ae1")
mod_tab_pc <- list()
for (out in outcomes_mp) {
bal_formula <- as.formula(paste0(out, " ~ top_party | const_year + party_code | 0  | const_year"))
mod_pc <- summary(felm(bal_formula, mp_level))
res <- pre_post_format(mod_pc)
mod_tab_pc[[out]] <- res
}
## Two-period DiD models
# Party campaign level
did_spend <- mp_level %>%
select(total_spend_ae0, total_spend_ae1, top_party, const_year, party_code) %>%
pivot_longer(cols = c(total_spend_ae0, total_spend_ae1),
names_to = "period", values_to = "spend") %>%
mutate(period_bin = ifelse(str_detect(period,"ae0"),0,1)) %>%
felm(spend ~ factor(period_bin) + factor(top_party):factor(period_bin) | const_year + party_code | 0  | const_year,
data = ., keepX = TRUE) %>%
summary(.)
## Check balance pre- and post- lottery
library(tidyverse)
library(haven)
library(lfe)
library(xtable)
library(boot)
set.seed(89)
# Party-campaign level data
all_data <- read_dta("Ballots/Data/Panel/006_panel_council_mayors.dta")
race <- "councils"
# Individual-level data
ind_level <- read_dta("Ballots/Data/Panel/007_panel_councils_individual_rr.dta") %>%
filter(year == 2015) %>%
mutate(muni_party = paste0(muni_code,"_",party_code),
total_pub_ind = total_pub_ind/census) %>%
mutate_at(vars(contains("_rank")), ~ ifelse(is.na(.),0,1)) %>%
mutate_at(vars(contains(c("ae1","ae0","ai1","ai0"))), ~ (./census))
# Aggregate pre- and post- lottery spending to party-campaign level
mp_spend <- ind_level %>%
group_by(muni_party) %>%
summarise_at(outcomes_ind, sum, na.rm = TRUE) %>%
rename_all(~ str_replace(., "_ind",""))
mp_level <- all_data %>%
filter(year == 2015,
data_type == race,
!is.na(total_income),
!is.na(total_spending),
!is.na(total_public)) %>%
mutate(muni_party = paste0(muni_code,"_",party_code)) %>%
left_join(mp_spend, by = "muni_party")
## Check balance pre- and post- lottery
library(tidyverse)
library(haven)
library(lfe)
library(xtable)
library(boot)
set.seed(89)
# Party-campaign level data
all_data <- read_dta("Ballots/Data/Panel/006_panel_council_mayors.dta")
race <- "councils"
# Individual-level data
ind_level <- read_dta("Ballots/Data/Panel/007_panel_councils_individual_rr.dta") %>%
filter(year == 2015) %>%
mutate(muni_party = paste0(muni_code,"_",party_code),
total_pub_ind = total_pub_ind/census) %>%
mutate_at(vars(contains("_rank")), ~ ifelse(is.na(.),0,1)) %>%
mutate_at(vars(contains(c("ae1","ae0","ai1","ai0"))), ~ (./census))
# Aggregate pre- and post- lottery spending to party-campaign level
mp_spend <- ind_level %>%
group_by(muni_party) %>%
summarise_at(outcomes_ind, sum, na.rm = TRUE) %>%
rename_all(~ str_replace(., "_ind",""))
mp_level <- all_data %>%
filter(year == 2015,
data_type == race,
!is.na(total_income),
!is.na(total_spending),
!is.na(total_public)) %>%
mutate(muni_party = paste0(muni_code,"_",party_code)) %>%
left_join(mp_spend, by = "muni_party")
# Aggregate pre- and post- lottery spending to party-campaign level
mp_spend <- ind_level %>%
group_by(muni_party) %>%
summarise_at(outcomes_ind, sum, na.rm = TRUE) %>%
rename_all(~ str_replace(., "_ind",""))
## Check balance pre- and post- lottery
library(tidyverse)
library(haven)
library(lfe)
library(xtable)
library(boot)
set.seed(89)
# Party-campaign level data
all_data <- read_dta("Ballots/Data/Panel/006_panel_council_mayors.dta")
race <- "councils"
# Individual-level data
outcomes_ind <- c("total_spend_ind_ae0","total_spend_ind_ae1")
ind_level <- read_dta("Ballots/Data/Panel/007_panel_councils_individual_rr.dta") %>%
filter(year == 2015) %>%
mutate(muni_party = paste0(muni_code,"_",party_code),
total_pub_ind = total_pub_ind/census) %>%
mutate_at(vars(contains("_rank")), ~ ifelse(is.na(.),0,1)) %>%
mutate_at(vars(contains(c("ae1","ae0","ai1","ai0"))), ~ (./census))
# Aggregate pre- and post- lottery spending to party-campaign level
mp_spend <- ind_level %>%
group_by(muni_party) %>%
summarise_at(outcomes_ind, sum, na.rm = TRUE) %>%
rename_all(~ str_replace(., "_ind",""))
mp_level <- all_data %>%
filter(year == 2015,
data_type == race,
!is.na(total_income),
!is.na(total_spending),
!is.na(total_public)) %>%
mutate(muni_party = paste0(muni_code,"_",party_code)) %>%
left_join(mp_spend, by = "muni_party")
#### Functions ####
pre_post_format <- function(mod) {
coef <- mod$coefficients[1,1]
se <- mod$coefficients[1,2]
coef_sig <-  ifelse(coef/se > 2.576, "***",
ifelse(coef/se > 1.96, "**",
ifelse(coef/se > 1.64, "*","")))
coef_print <- paste0(round(coef,3),coef_sig)
se_print <- paste0("(",round(se,3),")")
n <- mod$N
res <- list(coef_print, se_print, "-","","-","",n)
}
did_format <- function(mod) {
mod_coef <- mod$coefficients[,1][grepl(":", rownames(mod$coefficients))]
mod_se <- mod$coefficients[,2][grepl(":", rownames(mod$coefficients))]
mod_sig <- ifelse(mod_coef/mod_se > 2.576, "***",
ifelse(mod_coef/mod_se > 1.96, "**",
ifelse(mod_coef/mod_se > 1.64, "*","")))
mod_n <- mod$N
mod_res <- list("-","") #Blank for non-mod coef + SE
for (i in 1:length(mod_coef)) {
mod_res[[length(mod_res) + 1]] <- paste0(round(mod_coef[i],3),mod_sig[i])
mod_res[[length(mod_res) + 1]] <- paste0("(",round(mod_se[i],3),")")
}
mod_res[[length(mod_res) + 1]] <- mod_n
return(mod_res)
}
make_table <- function(tab_list, path) {
do.call("cbind",tab_list) %>%
as.data.frame(.) %>%
add_column(.before = 1,
` ` = c("Effect of Row = 1","",
"Row = 1 x Pre-Lottery","",
"Row = 1 x Post-Lottery","",
"N")) %>%
xtable(.) %>%
print(.,
include.rownames = FALSE,
include.colnames = FALSE,
booktabs = TRUE,
hline.after = NULL,
only.contents = TRUE,
file = path)
}
mod_tab_ind <- list()
for (out in outcomes_ind) {
bal_formula <- as.formula(paste0(out, " ~ top_party | const_year + party_code | 0  | muni_party"))
mod_ind <- summary(felm(bal_formula, ind_level))
res_ind <- pre_post_format(mod_ind)
mod_tab_ind[[out]] <- res_ind
}
outcomes_mp <- c("total_spend_ae0","total_spend_ae1")
mod_tab_pc <- list()
for (out in outcomes_mp) {
bal_formula <- as.formula(paste0(out, " ~ top_party | const_year + party_code | 0  | const_year"))
mod_pc <- summary(felm(bal_formula, mp_level))
res <- pre_post_format(mod_pc)
mod_tab_pc[[out]] <- res
}
## Two-period DiD models
# Party campaign level
did_spend <- mp_level %>%
select(total_spend_ae0, total_spend_ae1, top_party, const_year, party_code) %>%
pivot_longer(cols = c(total_spend_ae0, total_spend_ae1),
names_to = "period", values_to = "spend") %>%
mutate(period_bin = ifelse(str_detect(period,"ae0"),0,1)) %>%
felm(spend ~ factor(period_bin) + factor(top_party):factor(period_bin) | const_year + party_code | 0  | const_year,
data = ., keepX = TRUE) %>%
summary(.)
mod_tab_pc[["Diff-in-Diff"]] <- did_format(did_spend)
mod_tab_pc[["Diff-in-Diff"]]
did_spend
library(usethis)
use_github_actions()
use_github_actions_badge(name = "R-CMD-check", repo_spec = NULL)
use_github_actions_badge(name = "R-CMD-check")
install.packages(repos = "CRAN")
install.packages("rMIDAS",repos = "CRAN")
install.packages("rMIDAS",repos = "cran")
install.packages(repos = "cran")
install.packages("rMIDAS")
